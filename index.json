[{"content":"در static analysis ما برنامه را اجرا نمی‌کنیم و معمولاً فقط کد (یا کد decompile یا disassemble شده) آن را بررسی می‌کنیم. توضیح این روش از حوصله این مقاله خارج است (خودمونیش این میشه که گوگل کنید).\nچرا static analysis؟ من یک مهندس امنیت محصول (ترجمه product security engineer) هستم و معمولا به کد محصولات دسترسی دارم. بررسی کد یکی از مهمترین بخشهای کار من است. محصولات نرم‌افزاری مدرن (و به خصوص بازیهای کامپیوتری) ملغمه ای از چند هزار کتابخانه و فریمورک هستند و بررسی دستی کد آنها غیرممکن است. به عنوان مثال یک بازی کامپیوتری حداقل چندین میلیون خط کد دارد:\n کد client بازی که روی کامپیوتر و یا کنسول اجرا می‌شود (معمولاً ++C). کد سرورهای مختلف مانند login, lobby, matchmaking و غیره که می‌تواند به هر زبانی باشد. کد برنامه موبایل همراه بازی مانند FIFA 21 Mobile companion app. زبان برنامه نویسی معمولاً جاوا (اندروید) و swift (برای iOS) است. کد integration با سرویسهای دیگر مانند market place و یا Steam. کد زیرساخت ابری (منظور اینجا infrastructure-as-code مثل Terraform است که فارسیش نمی‌دونم چیِ).  برای بررسی این همه کد باید به چندین زبان برنامه‌نویسی و فریمورک عمومی و خصوصی (ترجمه آزاد proprietary) مختلف مسلط بود (که تقریبا امکان ندارد) و از ابزارهای مختلف استفاده کرد.\nاستفاده از grep مهمترین اسلحه من برای بررسی کد، grep است. معمولاً به دنبال کلمات کلیدی در کد می‌گردم تا قسمت‌های مهم را پیدا کنم. مثلاً grep -ir password در تمامی فایلهای دایرکتوری حاضر (و فرزندانش) به دنبال کلمه password (صرفنظر از حروف کوچک و بزرگ) می‌گردد.\nدر چند سال اخیر از برنامه ripgrep که با زبان برنامه‌نویسی Rust نوشته شده است، استفاده می‌کنم. به عنوان یک gopher سابق همیشه به شوخی می‌گویم که بالاخره Rust هم یک فایده‌ای داشت. تا یک سال قبل شاید 90 درصد باگ‌های امنیتی در کد را با grep پیدا کرده بودم. بعد از مدتی سروکله زدن با فریمورک‌ها و زبانهای برنامه‌نویسی مختلف لیستی از کلمات مهم درست می‌کنید و به دنبال آنها می‌گردید.\nنقطه ضعف grep بزرگترین مشکل grep برای تحلیل کد، ندانستن مفهوم کلمات است. grep برای جستجوی متن طراحی شده و برایش مهم نیست که این کلمه در آن زبان برنامه‌نویسی چه تایپی دارد (مثلاً تابع یا کامنت یا غیره). اگر به دنبال کلمه password در کد Go زیر بگردیم چهار نتیجه مختلف داریم:\n// nem.go package main func main() { // کلمه پسورد اینجا بخشی از کامنت است  // Hardcoded passwords are bad.  // کلمه پسورد در اینجا نام متغیر است  password := \u0026#34;hunter2\u0026#34; // کلمه پسورد در اینجا بخشی از یک استرینگ است  errorMsg := \u0026#34;Incorrect password\u0026#34; } // کلمه پسورد در اینجا بخشی از نامِ تابع است func validatePassword(p string) bool { // Do something  return true } فرض کنیم هدف من توابعی است که در نام خود کلمه پسورد را دارند. در اینجا با استفاده از grep باید چهار نتیجه را بررسی کنم تا به جواب برسم. شاید بگویید که این مشکلی نیست ولی، در یک برنامه واقعی با میلیونها خط کد، هر جستجو صدها نتیجه بی‌ربط (false positive) دارد.\nیک تکنیک من برای حل این مشکل جستجوی پرانتز به همراه نام تابع بود.\nاین تا حدی کمک می‌کند ولی مواردی که فاصله یا whitespace بین پرانتز و کلمه پسورد وجود دارد را پیدا نمی‌کند. می‌توانم با استفاده از regular expression جستجوی خود را بهتر کنم ولی در انتها راهی وجود ندارد که به grep بفهمانم که فقط به دنبال نام تابع بگردد.\nورود Semgrep وز آشنایی با Semgrep یکی از بهترین روزهای زندگی شغلی من بود. با استفاده از Semgrep می‌توانم چند پله بالاتر از grep عمل کنم و به برنامه بفهمانم که فقط در یک تایپ خاص به دنبال کلمات بگردد. نمی‌خواهم این پست را به \u0026ldquo;آموزش Semgrep\u0026rdquo; تبدیل کنم. برای این کار از https://semgrep.dev/learn شروع کنید. ولی، چند مثال کوتاه را توضیح می‌دهم.\nhttps://semgrep.dev/learn/2 می‌خواهیم در کد Python زیر همه مواردی که تابع logging.info با پارامتر تابع get_user فراخوانی شده را پیدا کنیم.\nimport logging as lg def get_user(uid): d = {1: \u0026#34;harry\u0026#34;, 2: \u0026#34;ron\u0026#34;, 3: \u0026#34;hermione\u0026#34;} return d[uid] # Match both of these using an ellipsis. logging.info(get_user(1) + \u0026#34; logged in\u0026#34;) lg.info(get_user(2) + \u0026#34; logged in\u0026#34;) اگر از grep استفاده کنیم:\nاینجا مورد اول پیدا شد و مورد دوم نه. چرا؟ چون grep نمی‌داند که lg در اینجا معادل logging است. با Semgrep این مشکل را نداریم چون می‌داند که اینجا lg و logging یکی هستند. \u0026hellip; هم همان غیره خودمان است که با همه چیز match می‌شود (توضیح بیشترش را در خود آموزش بخوانید).\nhttps://semgrep.dev/learn/6 اینجا به بحث شیرین metavariable می‌رسیم که می‌تواند جایگزین هر آیتم باشند. اگر بخواهیم همه توابع را در Python پیدا کنیم:\ndef $FUNC(...): ... حالا می‌توانیم داخل این توابع جستجو کنیم. در اینجا فقط یک جستجوی ساده انجام می‌دهیم. می‌خواهیم که ببنیم آیا تابع با یک مِتُد از requests تمام می‌شود؟\nحالا فرض کنید بخواهیم یک rule برای امنیت بنویسیم. می‌خواهیم چک کنیم که آیا ورودی تابع در پارامترهای مِتُدِ requests وجود دارد؟ چرا این کار ناامن است؟ فرض می‌کنیم که ورودی تابع مستقیماً از ورودی کاربر است و اگر به کاربر اجازه دهیم تا هر URL را دریافت کند ممکن است به مشکل SSRF بربخوریم. rule ما به این صورت است.\ndef $FUNC($USERINPUT): ... requests.$METHOD(...,$USERINPUT,...) در خط اول یک metavariable تعریف کرده‌ام که به جای ورودی تابع است. سپس، چک می‌کنیم که ورودی به مِتُد می‌رسد یا خیر. یک مِتُد امن هم به کد اضافه کرده‌ام که نباید در نتایج باشد.\nبا metavariable ها کارهای عجیب غریبی می‌توانیم انجام بدهیم. مشابه همین کاری که کردیم را در بخش 8 آموزش می‌بینیم.\nhttps://semgrep.dev/learn/8 اگر در Python یک فایل را برای خواندن باز کرده باشیم دیگر نباید به آن بنویسیم. در اینجا metavariable متغیر حاوی هَندِلِ فایل است. سپس می‌توانیم چک کنیم که آیا متد write را برای آن فراخوانی کرده‌ایم. پس rule ما این شکل می‌شود:\nhttps://semgrep.dev/learn/13 درس 13 جالب است. می‌توانیم توسط pattern-inside بخشهایی که می‌خواهیم را جدا کنیم و سپس داخل آنها را با pattern بگردیم. اینجا می‌خواهیم که داخل توابع این کُدِ Go:\n آیا پارامتر ورودی از نوع http.ResponseWriter هست؟ آیا مِتُدِ Write روی آن فراخوانی شده است؟  در ابتدا rule به این صورت است. اول همه توابع توسط pattern-inside انتخاب می‌شوند و بعد در داخل آنها به دنبال متد Write می‌گردد.\nباید pattern-inside را دستکاری کنیم تا تنها توابعی را پیدا کند که یکی از پارامترهای ورودیشان از نوع http.ResponseWriter است. با گذاشتن \u0026hellip; قبل و بعد پارامتر به Semgrep می‌گوییم که این پارامتر می‌تواند هرجا باشد.\n- pattern-inside: |func $FUNC(..., $WRITER http.ResponseWriter, ...) { ... } حالا می‌توانیم توسط pattern چک کنیم که آیا مِتُدِ Write روی این ورودی فراخوانی شده یا خیر.\nحل مساله اول حتماً کل آموزش را تا انتها ادامه دهید ولی حل تک تک آنها در این پست فایده‌ای ندارد. بجای آن می‌خواهم مشکلی که در اول داشتیم را حل کنم. مشکل ما این بود که میخواستیم توابعی که در نام آنها کلمه password وجود دارد را پیدا کنیم. می‌توانید به صورت عملی راه‌حلهای خودتان را در این آدرس امتحان کنید https://semgrep.dev/s/WODo.\nدر مرحله اول یک pattern می‌نویسیم تا همه توابع را پیدا کند. این کار را قبلا انجام داده‌ایم و چیز عجیبی نیست.\nجواب جستجو هر دو تابع را پیدا کرد. دقت کنید که الان نام تابع در metavariable به نام FUNC ذخیره شده. حالا، می‌توانیم از قابلیت metavariable-regex استفاده کنیم و یک regex را روی آن اجرا کنیم.\nrules: - id: password-in-func-name languages: - go message: Find functions that have password in their name. patterns: - pattern: |func $FUNC(...) { ... } - metavariable-regex: metavariable: $FUNC regex: .*password.* severity: ERROR ولی باز هم کار نمی‌کند چون regex به صورت case-sensitive اجرا می‌شود. برای اجرای آن به صورت case-insensitive می‌توانیم از inline flag استفاده کنیم.\nregex: (?i).*password.* و جوابمان را گرفتیم.\nچی یاد گرفتیم؟ یاد گرفتیم که با استفاده از Semgrep راحت‌تر داخل کد جستجو کنیم. با Semgrep کارهای خیلی عجیب غریبی کرده‌ام که خودم هم باورم نمی‌شود. شما هم می‌توانید از این ابزار مجانی در کار خود استفاده کنید و به قولی sky is the limit.\nنقشه من برای بلاگ بعدی:\n چرا از Semgrep (مثلا به جای CodeQL) استفاده می‌کنم. چگونه از Semgrep در CI/CD استفاده می‌کنم.  ","permalink":"https://parsiya.github.io/parsiya.fa/post/2021/semgrep-1/","summary":"در static analysis ما برنامه را اجرا نمی‌کنیم و معمولاً فقط کد (یا کد decompile یا disassemble شده) آن را بررسی می‌کنیم. توضیح این روش از حوصله این مقاله خارج است (خودمونیش این میشه که گوگل کنید).\nچرا static analysis؟ من یک مهندس امنیت محصول (ترجمه product security engineer) هستم و معمولا به کد محصولات دسترسی دارم. بررسی کد یکی از مهمترین بخشهای کار من است. محصولات نرم‌افزاری مدرن (و به خصوص بازیهای کامپیوتری) ملغمه ای از چند هزار کتابخانه و فریمورک هستند و بررسی دستی کد آنها غیرممکن است.","title":"چرا از Semgrep برای Static Analysis استفاده کنیم؟"},{"content":"چرا شهروند ایرانی که وجودش در آمریکا سیاسی است و به دلایل سیاسی نمی‌تواند از تکنولوژی‌های روز جهان (مثلاً همین Basecamp) استفاده کند، با حرف سیاسی مشکل دارد و با فاندر آمریکایی همزادپنداری می‌کند؟\nاین نوشته را در ویرگول منتشر نکردم. در بلاگ خودم باشد بهتر است.\nچند مدت پیش تصمیم Basecamp در ممنوعیت بحث سیاسی در صنعت تِک خیلی سروصدا کرد و یک‌سوم شرکت هم استعفا دادند. گوگل کنید و ماجرایش را بخوانید. می‌خواهم در مورد واکنش هموطنان ایرانی صحبت کنم.\nبه طرز عجیبی با این کار موافق بودند. این برای من سوال بزرگی بود که چرا فکر می‌کنید در این نبرد فرهنگی (culture war) سمت روسای شرکت هستید. آنها حاضر نیستند برای شما کوچکترین هزینه‌ای بدهند.\nدلایل مختلف در اینترنت زیاد بود ولی تقریباً کل استدلالهای هموطنان را در این بلاگ دیدم:\n https://reshadman.com/chh-tfqy-dr-basecamp-ftd  من اسم نویسنده را تا قبل از خواندن مطلب نشنیده بودم و ارتباط خاصی با جامعه تِک ایران ندارم. اما این نوشته برای من قابل هضم نبود. هموطنان برایش به‌به و چه‌چه کرده بودند. برایم جالب بود که چرا؟ یک شهروند ایرانی، ضربه‌های بزرگی از سیاست خورده‌ است. چرا باید مخالف مطرح شدن این صحبتها باشد؟\nحرف سیاسی یعنی چه؟ در فرهنگ ایرانی سیاست دامنه محدودی دارد و از بچگی در گوشمان خوانده‌اند که \u0026ldquo;آسّه برو آسّه بیا.\u0026rdquo; ولی حرف سیاسی بیشتر از آن چیزی است که فکر می‌کنیم. بگذارید از خود مقاله مثال بیاوریم. در این بلاگ از Basecamp تعریف زیادی شده است:\n بین پرداختی فردی که از ایران استخدام بشه و فردی که از شیکاگو استخدام بشه «هیچ» تفاوتی بر اساس موقعیت جغرافیلایی وجود نداره\n ها! حالا بدون حرف سیاسی سوالات زیر را جواب دهید:\n چرا کارمند Basecamp که به ایران برای تعطیلات سفر کرده نباید و یا نمی‌تواند به اکانت محل کار و یا حساب بانک شخصی خود لاگین کند؟ چرا Basecamp در ایران کارمند ندارد؟ چرا نویسنده مقاله نمی‌تواند در Basecamp کار کند و حقوقی معادل شیکاگو بگیرد؟ چرا نمی‌توانیم در ایران اشتراک Basecamp بخریم؟  حالا فرض کنید که شما در شرکت آقای نویسنده در ایران کار می‌کنید و در آنجا هم حرف سیاسی ممنوع است. لطفاً جواب سوالات زیر را بدون اخراج شدن بنویسید:\n چرا از سرویس‌های ابری مانند AWS، GCP و یا Azure استفاده نمی‌کنید؟ چرا نمی‌توانید سرویس‌های خود را در بازارهای جهانی عرضه کنید؟ چرا سرمایه‌گذار یا کارمند آمریکایی ندارید؟  اگر جواب شما \u0026ldquo;تحریم‌های آمریکا\u0026rdquo; بود شما از شرکت اخراج شدید چون حرف سیاسی زدید.\nتحریم (درست یا غلط) یک موضوع سیاسی است.\nآیا Basecamp می‌تواند فرد ایرانی استخدام کند؟ استخدام شهروندان ایران (و چند کشور دیگر) در شرکتهای آمریکایی (و کانادایی و شاید چند کشور) کلّی دردسر دارد. استخدام یک فرد ساکن ایران (حتی یک شهروند آمریکا) غیرممکن است. حتی استخدام یک ایرانیِ دانشجو در آمریکا و کانادا هم به export license برمی‌خورد و بسیاری از شرکتها (حتی شرکتهای بزرگ مانند آمازون) به محض اینکه می‌فهمند کارجو شهروند ایران است عطایش را به لقایش می‌بخشند.\nگیت‏‌هاب را حرف سیاسی آزاد کرد چند ماه پیش گیت‌هاب با چانه‌زنی زیاد با دولت آمریکا بالاخره تحریم ایران را برداشت. آیا این حرکت ربطی به سیاست نداشت؟ فکر کردید نَت فریدمن مدیر گیت‌هاب به جو بایدن زنگ زده و گپ دوستانه‌ای داشته اند و تمام؟ دستگاه عریض و طویل حقوقی گیت‌هاب با OFAC دو سال تمام سروکله زده است. چرا گیت‌هاب باید این کار را انجام دهد؟ بازاری در ایران ندارند. این خواسته از کجا شروع شده؟ دلشان سوخته یا لابی کارمندان بوده است؟ نمی‌دانیم ولی صحبت در مورد برداشتن تحریم ایران حرف سیاسی است.\nحرف سیاسی در یک شرکت آمریکایی، روی زندگی یک فرد مقیم ایران تاثیر مستقیم دارد.\nمن مشابه این صحبت را در محل کارم داشته ام. حتی بازیهای رایگان ما در ایران قابل دسترسی نیستند. دوستان و خانواده من در ایران نمی‌توانند بازیهای ما را استفاده کنند. من نمی‌توانم از سهمیه بازیهای رایگان خودم به آنها هدیه دهم. چرا؟ آیا کارفرمای از مشتری بیشتر بدش می‌آید؟ خیر. توسعه دهندگان بازی از خدایشان هست که افراد بیشتری به بازیهای آنها دسترسی داشته باشند. من خوشحال می‌شوم که پدر و مادر من بتوانند نام من را در بازی ببینند. اونوقت من چجوری پز بدم؟\nتصویب قانون کاری سیاسی است در آمریکا/کانادا (من در این دو کشور زندگی کرده‌ام و در مورد بقیه کشورها نمی‌توانم نظر دهم) بسیاری از حقوق فردی و اجتماعی با کنشهای سیاسی بدست آمده‌اند. از مزایای Basecamp در بلاگ استفاده کنیم:\n توی تابستون‌ها همه ۴ روز در هفته کار میکنن\n همین پنج روز کار یا 40 ساعت کار در هفته نتیجه فعالیت‌های جنبش کارگری آمریکا است. کارگران با اعتصاب کنگره را مجاب کردند که کار روزانه را به 8 ساعت کاهش دهد. این صفحه اطلاعات بیشتری در این مورد دارد:\n https://en.wikipedia.org/wiki/Eight-hour_day#United_States   آدما میتونن سالی چند ماه مرخصی با حقوق برن\n آمریکا بر خلاف اکثر کشورهای مشابه، حداقل مرخصی استحقاقی و استعلاجی در قانون ندارد. به همین دلیل میزان مرخصی در آمریکا به طور میانگین خیلی کمتر از کشورهای اروپایی است. اگر یک گروه از شهروندان آمریکا بخواهند به دنبال چنین قوانینی بروند. باید کار سیاسی کنند. چون باید با نمایندگان کنگره لابی کنند و سروکله بزنند.\nاگر کارمندان Basecamp به دنبال مرخصی بیشتر باشند، باید یک اتحادیه (union) تشکیل دهند و به صورت جمعی با شرکت چانه‌‎زنی کنند. از دیدگاه شرکت، اتحادیه سّم است چون هر چیزی که باعث قدرت بیشتر کارمندان شود با منافع مالی شرکت در تضاد است. ولی، در آمریکا معمولا شرکتها نمی‌توانند جلوی فعالیت کارمندان برای تشکیل اتحادیه را بگیرند و آنها را اخراج کنند. قوانینی و سازمان دولتی فدرالی به نام National Labor Relations Board وجود دارد که برای حفظ حقوق کارمندان در مورد اتحادیه‌ها فعالیت می‌کند. این قوانین چگونه تصویب شده اند؟ حدس شما درست است با چانه‌زنی جنبشهای کارگری با دولت آمریکا.\n رنج پرداخت حقوقشون توی ۱۰ درصد رقابتی بالای بازار کار آمریکا اختصاصا برای هر عنوان شغلیه\n میزان پرداخت حقوق از کجا می‌آید؟ آیا یک شرکت می‌تواند هر حقوقی که خواست (مثلاً ساعتی یک دلار) به کارمندانش پرداخت کند؟ خیر. باید حداقل پایه حقوق را پرداخت کند (استثنا وجود دارد). پایه حقوق در قانون مشخص شده است.\nدر بقیه handbook شرکت می‎‌بینیم که یکی از مزایای شرکت، بیمه درمانی است. آمریکا بیمه درمان همگانی ندارد. چرا؟ دلیلش سیاسی است چون تقریباً تمام یکی از دو حزب اصلی و نیمی از حزب دوم با آن مخالفند. اوباما قسمت زیادی از سرمایه سیاسی خود را خرج Affordable Care Act کرد (قدمی به سوی بیمه درمان همگانی) و به همین دلیل دو سال بعد در اولین انتخابات سراسری، حزبش اکثریت خود را در کنگره از دست داد. بحث در مورد بیمه درمان در آمریکا یک بحث سیاسی است.\nاستمنای روحی با Basecamp نه من و نه نویسنده در Basecamp کار نکرده‌ایم ولی ایشان با این هندبوک به ماورا رفته اند.\n همین بیسکمپ که این اتفاقات براش افتاد مزیت‌هایی داره که کارمندان شرکت‌های دیگه خوابش رو هم نمیتونن ببینن\n بر خلاف آنچه نویسنده گفته، این مزایا چیز عجیبی نیستند. امکانات خوبی هستند اما شرکتهای مشابه هم کم و بیش همین را دارند. کارمند خوب با مزایای خوب جذب می شود. مثلاً من بعد از مرخصیهای مختلف، تعطیلات رسمی و research week سر جمع 40 هفته در سال کار می‌کنم و 52 هفته حقوق می‌گیرم. بقیه شرکتهای همین سطح هم تقریباً همین گونه هستند. اینها چیزهایی نیست \u0026ldquo;که کارمندان شرکتهای دیگه خوابش رو ببینند.\u0026rdquo;\nآیا کارفرما عاشق چشم و ابرویِ من است؟ نه. بخشی را مجبور است به دلیل قوانین کشور بدهد .حداقل مرخصی استحقاقی و استعلاجی در کانادا وجود دارد. پس شرکت مجبور است آن را اجرا کند. هر چیزی بیشتر از آن به عنوان مزیت محسوب می‌شود1. بقیه مزایا هم برای جذب نیرو است و اینکه اگر من بروم، نفر بعدی هم همین توقعات را دارد چون شرکت مشابه هم همین را دارد.\nبحث آخر هم اولویت افراد است. برای بعضی پول و مزایا مهمترین چیز است و برایشان مهم نیست چه می‌شود. هر شخصی باید برای خودش تصمیم بگیرد. ولی، اگر فقط پول و مزایا برای شما مهم هستند شرکتهایی هستند که بسیار بیشتر از Basecamp پول می‌دهند.\nتصور غلط از دغدغه‌های افراد در آمریکا به نظر می‌رسد نویسنده در جامعه مورد بحث زندگی نکرده و فکر می‌کند که صحبت سیاسی در شرکت یعنی:\n هنوز آدم‌ها حق این رو دارن که اگر در ساعات کاری دغدغه این رو داشتن که بچه سوریه‌ای مهاجرشون تو مدرسه آزار میبینه با همکارشون صحبت کنن\n با وجودی که نویسنده خواسته با تمسخر، سطح خواسته‌های سیاسی یک پناهنده سوری را به اذیت شدن فرزند در مدرسه تقلیل دهد (که همین هم مساله مهمی است) به اشتباه یک مورد سیاسی دیگر را مثال زده است. در بسیاری از بخش‌های آمریکا (بخش == county)، هیات امنای مدارس دولتی یا school board با انتخابات مشخص می‌شوند. هیات امنا قدرت چانه‌زنی زیادی دارد و می تواند نحوه برخورد مدارس (مثلا با نژادپرستی) را تحت تاثیر قرار دهد. حضور در هیات امنا برای برخی سکوی پرش ورود به عرصه سیاست است.\nاین نگاهی است که می‌گوید \u0026ldquo;اینها خوشی زده زیر دلشون و فقط مشکلشان فلان است.\u0026rdquo; با این استدلال نباید از عدم دسترسی به تکنولوژیهای ابری در ایران ناراحت باشید چون مردم دیگری در دنیا هستند که آب لوله کشی ندارند.\nفاندر و قدرت جمعی کارمندان فاندر (چه ایرانی و چه خارجی) از قدرت جمعی کارمندان در هراس است. بیشتر از آن از اینکه کارمندان پِی به قدرت جمعیشان ببرند می‌ترسد. یکی از دلایل قوانین ممنوعیت union busting (مبارزه با اتحادیه ها) همین است که شرکت ها تا بوی اتحادیه به مشامشان رسید شروع به اخراج نکنند (که با وجود این قوانین باز هم کارهایی می‌کنند). فاندرها علاقه دارند که سود اصلی شرکت را برای خود داشته باشند ولی ضرر و ریسک را در داخل شرکت توزیع کنند (شعار \u0026ldquo;ما همه یک خانواده هستیم\u0026rdquo;). وقتی یک سوم شرکت می‌گویند \u0026ldquo;ما رفتیم\u0026rdquo;، فاندر می‌ماند و حوضش و کاری که روی زمین مانده است. استخدام کار هزینه بری است بخصوص وقتی که افرادی با 10 سال سابقه کار از شرکت استعفا دهند. این ریسک فاندر بودن است ولی با یک چرخش و پروپاگاندا این مشکل را به گردن کارمندان می اندازند.\nحالا فکر می‌کنید طرف هم میاد شمای شهروند ایران که براش دست زدی را استخدام کند؟ بفرمایید امتحان کنید.\nیکی از دلایل پروپاگاندای VC ها هم همین است. مشابه همین برخوردها و کوبیدن ها را بعد از تشکیل اتحادیه های شرکت های تکنولوژی مثل گوگل و کیک استارتر دیدیم. اگر اینها الگو شوند کارمندان درخواست حقوق (نقدی و غیرنقدی) بیشتر می‌کنند و این یعنی کاهش سود فاندرها و سخت شدن سوءاستفاده از آنها.\nبه تو چه، پارسیا؟ حرف درستی است. اگر کل ایران از Basecamp استقبال کنند یا با آن مخالف باشند تاثیری در زندگی من ندارد. ولی برایم عجیب بود که چرا هموطنان از تصمیماتی که مستقیماً به ضررشان است حمایت می‌کنند. حرف سیاسی در یک شرکت آمریکایی روی زندگی یک فرد مقیم ایران تاثیر مستقیم دارد. اینکه دغدغه کارمندان تکنولوژی آمریکا برای جامعه تِک ایران مهم نباشد، چیز عجیبی نیست (در صورتی که حداقل چند مثال از عکس آن مانند گیت‌هاب وجود دارد). مسخره‌کردن آن بدون لحظه‌ای زندگی در آن جامعه کار درستی نیست.\n  بحث این نیست که کانادا خوب است و آمریکا بد، اتفاقاً من آمریکا را بیشتر از کانادا دوست دارم.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n  ","permalink":"https://parsiya.github.io/parsiya.fa/post/2021/basecamp/","summary":"\u003cp\u003eچرا شهروند ایرانی که وجودش در آمریکا سیاسی است و به دلایل سیاسی نمی‌تواند از تکنولوژی‌های روز جهان (مثلاً همین Basecamp) استفاده کند، با حرف سیاسی مشکل دارد و با فاندر آمریکایی همزادپنداری می‌کند؟\u003c/p\u003e","title":"Basecamp و همزادپنداری با فاندر آمریکایی"},{"content":"این کار \u0026ldquo;هک\u0026rdquo; نیست و با کاری که من در محل کارم انجام می‌دهم خیلی متفاوت است. ولی، دستکاری save این بازی فرصت خوبی است تا با یکسری از مفاهیم امنیت بازیهای کامپیوتری آشنا شویم.\nاصل این نوشته را می‌توانید در بلاگ انگلیسی من بخوانید.\nپیش زمینه دستکاری سِیو، یکی از قدیمی‌ترین و ساده‌ترین روشها برای تقلب در بازیهای کامپیوتری است. تقلب در بازی یکی از عوامل اصلی آشنایی افراد با مقوله امنیت است (در زبان انگلیسی به چنین چیزی gateway drug می‌گویند). خیلی از افراد از جمله من از اینجا شروع کردیم و اولین قدمهای خود را با مهندسی معکوس ساختار سِیوهای بازی برداشتیم.\nهیچ وقت فکر نمی‌کردم که حقوق بگیرم که بازی کامپیوتری هک کنم.\nهدف ما در این بازی ما یک مکانیک هستیم که باید قطعات مختلف اتومبیل را عوض کند. دو مشخصه داریم:\n پول. تجربه یا experience.  هدف ما دستکاری سِیو بازی و تغییر این مقادیر است. سِیوهای بازی(نگارش Steam) در ویندوز در آدرس زیر ذخیره می‌شوند:\n%AppData%\\LocalLow\\Red Dot Games\\Car Mechanic Simulator 2015\\ در اینجا چند دایرکتوری داریم که هر کدام مخصوص یک پروفایل در بازی هستند و نام آنها profile0 و غیره است.\nاولین قدم: جستجوی اعداد در فایل اولین قدم همیشه تبدیل مقداری که می‌خواهیم عوض کنیم به مبنای 16 یا hex و جستجوی آن در فایل است. این کاری است که در اکثر بازیهای قدیمی جواب می‌دهد. مثلاً اولین دستکاری سِیو من در بازی Heroes of Might and Magic بود. فرض کنید در این بازی می‌خواستم تعداد Unicorn هایم را اضافه کنم. دو گروه 13 عددی تشکیل می‌دادم و بعد در فایل سِیو به دنبال 0D می‌گشتم. اگر دو مقدار نزدیک به هم پیدا می‌کردم آنها را به FF (یا 255) تغییر می‌دادم. اگر درست بود، که چه خوب وگرنه دوباره جستجو می‌کردم.\nدر بازی SimCity 2000 هم مقدار پول در مبنای 16 در فایل سِیو ذخیره میشد. نکته‌ای که در سِیو این بازی وجود داشت این بود که تعداد بایتها با افزایش عدد افزایش پیدا می‌کرد. مثلاً مقدار 10000 به صورت 0x2710 در دو بایت ذخیره میشد. برای افزایش پول اگر این دو بایت را به FF FF تغییر می‌دادم به 65535 می‌رسیدم که پول زیادی نبود. اما اگر خودم یک بایت به فایل اضافه می‌کردم دیگر فایل قابل بارگذاری نبود. این به احتمال زیاد برای این بود که offset قسمتهای مختلف فایل به هم می‌ریخت. برای حل این مشکل اول مقدار پول خود را به 65535 تغییر می‌دادم. سپس با انتشارjunk bond (چیزی شبیه اوراق مشارکت) مقدار پول خودم را اضافه می‌کردم تا نیاز به بایتهای بیشتری برای ذخیره آن باشد و سه بایت شود. سپس آن را به FF FF FF و یا 16 میلیون و خرده‌ای تغییر می‌دادم. با این کار دیگر احتیاجی به مهندسی معکوس بقیه فایل نبود و سریع به هدفم رسیدم.\nدر اینجا هم به دنبال 0x07D0 (معادل 2000 در مبنای 16) و کلمه money در کل فایلهای دایرکتوری یک پروفایل گشتم:\n$ grep -arb $'\\xd0\\x07' global:631:▒▒▒▒{~gameVer▒▒▒▒▒1.1.6.0{~date▒▒▒▒▒2017-11-28 22:56:20{ $ grep -arb money global:610:▒▒▒{~money این مقادیر در فایلی به نام global پیدا شدند:\nحدس آگاهانه یا educated guess یکی از مهمترین تواناییها در مهندسی معکوس حدس زدن آگاهانه است (فکر کنم ترجمه فارسی educated guess). یعنی با داشتن اطلاعاتی محدود و معمولاً بر اساس تجربه حدس می‌زنیم. سپس این حدس را امتحان می‌کنیم و اگر درست بود زمان معمولاً زیادی صرفه‌جویی شده است. اگر غلط بود حدسمان را با نتیجه آزمایش تغییر می‌دهیم و دوباره آزمایش می‌کنیم.\nمثلاً بعد از دیدن فایل با این فرمت من مطمئن هستم که این یک فایلِ serialize شده است. اینجا به نظر می‌رسد که فرمت مخصوص موتور بازی Unity است. بعد از دیکامپایل کردن بازی و جستجو در کد فهمیدم که از کتابخانه Easy Save 2 استفاده شده است.\nاین دو عدد به صورت little-endian در چهار بایت ذخیره شده اند. حدس من این است که این مقادیر در یک متغیر از نوع int 32 ذخیره شده‌اند. برای آزمایش حدس این مقادیر را به FF FF FF FF تغییر دادم.\nو بازی را شروع کردم اما نتیجه آن چیزی که می‌خواستم نبود. مقدار پول و تجربه منفی است.\nاین یعنی چه؟ این یعنی مقدارها در یک متغیر از نوع signed int 32 ذخیره می‌شوند. در یک متغیر signed اولین بیتِ بزرگترین بایت (یعنی بایت چهارم) مخصوص علامت عدد است (اگر صفر باشد مثبت است و اگر یک باشد منفی). اگر عدد منفی باشد بقیه عدد به صورت two\u0026rsquo;s complement (فارسیش واقعاً نمی‌دانم چه می‌شود) ذخیره می‌شود. برای بدست آوردن این مقدار همه بیت‌ها را تغییر می‌دهیم (اگر صفر بود یک می‌شود و برعکس) و سپس با یک جمع می‌کنیم. برای همین است که FF FF FF FF در واقع منفی یک است. برای داشتن بزرگترین عدد ممکن در یک signed int 32 باید عدد 7F FF FF FF را وارد کنیم.\nمشکل جدید و integer overflow اینجا فکر کردم کار من تمام شده و حواسم به integer overflow نبود. بعد از شروع بازی و کمی تجربه کسب کردن، تجربه‌ام دوباره منفی شد.\nچرا؟ چون مقدار در یک signed int 32 ذخیره می‌شود و ما بزرگترین عدد ممکن (max int) را در تجربه داشتیم. اضافه کردن یک به چنین عددی باعث می‌شود که integer overflow داشته باشیم و تبدیل به کوچکترین عدد ممکن شود. اضافه کردن 1 به 7F FF FF FF مقدار 00 00 00 80 را به ما می‌دهد که معادل min int است. بازی هم کنترلی برای چِک کردن این حالت ندارد چون در داخل بازی هیچ‌وقت به چنین مقدار پول یا تجربه‌ای نمی‌رسیم. برای حل این مشکل باید عددی کوچکتر وارد کنیم. مثلاً من مقدار 7F 00 00 00 را وارد کردم.\nآیا این یک مشکل امنیتی است؟ معمولاً دستکاری سِیو یک مشکل امنیتی (security issue) نیست. اکثر سِیوها برای بازیهای تک نفره (single player) هستند و مشکل امنیتی این بازیها بسیار محدود است. اگر بشود با چنین سِیو در یک بازی چند نفره (multiplayer) بازی کرد آن وقت مشکل داشتیم. مثلاً اگر این بازی یک حالت چند نفره داشت و همه با هم در یک تعمیرگاه کار می‌کردند آن وقت مشکل داشتیم.\nاکثر مشکلات بازیهای تک نفره امنیتی نیستند. مثلاً یکی از بازیهای تک نفره ما Jedi: Fallen Order است. اگر شما بتوانید در این بازی تقلب کنید تاثیری در بازی بقیه کاربران ندارد. هنگام تست امنیتی چنین بازی من این مسائل برایم مهم نیست.\nتنها حالتی که ممکن است دستکاری سِیو یک بازی فقط تک نفره مشکل امنیتی باشد وقتی است که باز کردن این سِیو در یک کامپیوتر دیگر باعث remote code execution یا دستکاری فایلهای کامپیوتر مقصد شود.\nاین مشکل در بازی Untitled Goose Game وجود داشت. این بازی هم با موتور Unity تولید شده است و سِیوهای این بازی هم serialize شده هستند و هنگام بارگذاری آن و deserialize کردن کنترلی ندارد. اطلاعات بیشتر را در لینک زیر می‌توانید بخوانید. چیز عجیبی نیست یک insecure deserialization کلاسیک دات‌نت است.\n https://pulsesecurity.co.nz/advisories/untitled-goose-game-deserialization  چی یاد گرفتیم؟ دستکاری سِیو این بازی بسیار ساده است اما ما را با مفاهیمی مانند serialization، معندسی معکوس فایل و int 32 آشنا کرد و دستگرمی خوبی است.\n","permalink":"https://parsiya.github.io/parsiya.fa/post/2021/game-hacking-1/","summary":"این کار \u0026ldquo;هک\u0026rdquo; نیست و با کاری که من در محل کارم انجام می‌دهم خیلی متفاوت است. ولی، دستکاری save این بازی فرصت خوبی است تا با یکسری از مفاهیم امنیت بازیهای کامپیوتری آشنا شویم.\nاصل این نوشته را می‌توانید در بلاگ انگلیسی من بخوانید.\nپیش زمینه دستکاری سِیو، یکی از قدیمی‌ترین و ساده‌ترین روشها برای تقلب در بازیهای کامپیوتری است. تقلب در بازی یکی از عوامل اصلی آشنایی افراد با مقوله امنیت است (در زبان انگلیسی به چنین چیزی gateway drug می‌گویند).","title":"دستکاری سِیو بازی Car Mechanic Simulator 2015"},{"content":"یازده سال پیش برای پر کردن رزومه در دانشگاه آزاد چند ترم درس دادم. یکی از درس‌هایم \u0026ldquo;زبان تخصصی کامپیوتر\u0026rdquo; بود. همیشه به بچه‌ها می‎‌گفتم که مهمترین درسی که در دانشگاه یاد می‌گیرید همین است. هنوز هم روی حرفم هستم. ساختمان داده و برنامه‌نویسی و غیره مهم نیست، زبان بخوانید.\nپس زبان انگلیسی خیلی خوب است؟ نه، کلی مزخرف هم به زبان انگلیسی چاپ شده است. ولی، زبان انگلیسی زبان علمی جهان است. تحقیقات دست اول به این زبان تولید و منتشر می‌شوند. کنفرانس‌های بین‌المللی به این زبان هستند. زبان همه شرکت‌های چندملیتی (مثل کارفرمای خودم) همین است. نوشتن به زبان انگلیسی به شما کمک می‌کند تا در مورد دانش خود صحبت کنید و مقاله بنویسید.\nهر زبان دیگری همین فواید را داشت باید همان را یاد می‌گرفتیم. زمان ابن‌سینا باید عربی می‌خواندیم، زمان سقراط یونانی، و زمان سینوهه هم خط هیروگلیف مصری.\nخوب ترجمه اش را می‌خوانم اول باید صبر کنید یک نفر وقت بگذارد و ترجمه کند. بعد باید به آن ترجمه اعتماد کنید. خدابیامرز آقای ذبیح الله منصوری مشهور به این بودند که خودشان به ترجمه اضافه می‌کردند. این کار حتی در کتاب‌های غیرعلمی مشکل ایجاد می‌کند چه برسد به متن تخصصی.\nترجمه های قشنگ انگیزه اصلی من برای خواندن زبان، کتاب‌های خدابیامرز دیگر آیزاک آسیموف در ژانر علمی-تخیلی بود. انتشاراتی به نام شقایق اکثر کتاب‌هایش را ترجمه می‌کرد و اکثر جلدهایش به همین شکل بود. تقریباً هر چه پول داشتم خرج این کتاب‌ها می‌کردم. این جلد را بیشتر از همه دوست داشتم.\nعنوان اصلی کتاب \u0026ldquo;بنیاد دوم\u0026rdquo; این کتاب جلد سوم از سه گانه بنیاد آسیموف است. سه گانه بنیاد سه کتاب دارد که به ترتیب \u0026ldquo;بنیاد\u0026rdquo;، \u0026ldquo;بنیاد و امپراطوری\u0026rdquo; و \u0026ldquo;بنیاد دوم\u0026rdquo; نام دارند. این سه کتاب به نام‌های \u0026ldquo;ظهور/جنگ/سقوط امپراطوری کهکشان‌ها\u0026rdquo; در ایران منتشر شدند. حتی جلد کتاب بالا هم دزدی است. این اثری به نام Visions of Cassandra از Michael Whelan و برای کتاب دیگری است. حالا حساب کنید که کتابی که اسم و جلدش عوض شده چقدر به متن اصلی‌اش نزدیک است؟\nیادم هست کتاب دیگری داشتم که مجموعه ای از داستان‌های کوتاه آرتور سی کلارک بود. اسم اصلی کتاب Tales from the White Hart است ولی ترجمه اسم دیگری داشت که یادم نیست (جلدش قرمز بود). یک جمله از آن هنوز یادم هست. در تشبیه یک ساختمان نوشته بود شبیه یکی از زاده‌های فرانک اِل وان اوید رایتی بود. وقت خواندن این جمله تنها شانسی که آوردم این بود که خواهرم معماری خوانده بود و من نام فرانک لوید رایت را شنیده بودم. حالا چرا Lloyd تبدیل شده به \u0026ldquo;اِل وان اوید\u0026rdquo;؟ به دلیل اینکه در ماشین تحریر‌های قدیمی دکمه شماره یک وجود نداشت و از حرف L کوچک بجای آن استفاده می‌شد. طرف هم فکر کرده L1oyd و نه Lloyd است. چقدر اشتباه بزرگی است که من هنوز بعد از 25 سال یادم هست. حالا کسی که اسم را نتوانسته ترجمه کند بقیه را چه کرده؟\nجعفرنژاد قمی هم که معرف حضور همه کامپیوتری‌ها هست. ایشان هر چه کتاب کامپیوتر بود ترجمه می‌کردند. چقدر ایشان دخل و تصرف کرده اند معلوم نیست.\nو این لیست ادامه دارد… .\nچرا انگلیسی بنویسیم؟ چون مخاطب بیشتری خواهیم داشت. مخاطب بیشتر یعنی افراد بیشتری می‌دانند شما وجود دارید. یک روز در مورد این قضیه به مفصل خواهم نوشت. با نوشتن و تمرین بهتر می‌شوید.\nبلاگ من دلیل اصلی شغل حاضرم است. مدیر تیم، بلاگ من را خوانده بود و کسی را دنبال من فرستاده بود. زمان مصاحبه هم بیشتر با هم در مورد کار صحبت کردیم چون با خواندن نوشته‌های من به این نتیجه رسیده بود که به درد تیم می‌خورم. از طریق همین بلاگ در توییتر با افراد دیگر صنعت خودم آشنا شده ام که وقتی بخواهم کارم را عوض کنم به من کمک می‌کند. همین افراد اشکالات نوشته‌هایم را به من گوشزد کرده‌اند و سوال پرسیده‌اند. حتی بعضی مواقع گفته‌اند فلان متن مشابه را هم بخوان، به حل این مشکل کمک می‌کند.\nیک مثال از خودم در مورد تمرین و بهتر شدن بزنم. من از سال 2013 و بعد از شروع به کار در آمریکا شروع به نوشتن کردم. تا قبل از آن فکر می‏‎‌کردم زبانم خیلی خوب است. ناسلامتی تافل 113/120 داشتم و دو سال هم به انگلیسی درس خوانده بودم. ولی خیلی خبری نبود.\nمثلاً این پست را درسال 2013 و با نام Snow Crash and Malware نوشتم.\n So I finished \u0026ldquo;Snow Crash\u0026rdquo; and it was quite nice. The concept of linguistic malware was interesting and ahead of its time. I noticed that the term \u0026ldquo;Virus\u0026rdquo; was used correctly in the book as the malware was not propagating between people (then it would become a worm). Although I suspect it was due to the fact that most people (read almost everyone) calls any malware a \u0026ldquo;virus\u0026rdquo;. Nevertheless, it was a very enjoyable read.\n چقدر بد می‌نوشتم. شاید اگر بخواهم دوباره بنویسم این شود که هنوز هم در حد شکسپیر نیست اما برای ساعت یک نیمه شب خوب است:\n Finished the book \u0026ldquo;Snow Crash.\u0026rdquo; One of the classics. Linguistic malware is such a fascinating concept. Fortunately, Neal Stephenson used the term \u0026ldquo;virus\u0026rdquo; correctly in the book which is a pet peeve of mine. To the public, any computer malware is a virus.\n از نظر خودم نوشتن‌ام وقتی خوب شد که دیگر به فارسی فکر نکردم و کلمات را در ذهنم ترجمه نکردم.\nکجا بنویسیم؟ هرجا که دوست داشتید. این روزها نوشتن نیازی به هزینه اضافی ندارد. اگر دامنه خاص نخواهید می‌توانید یک بلاگ مجانی در صفحات گیت‌هاب داشته باشید که در پست قبلی درباره آن نوشته‌ام.\nبعد از نوشتن ممکن است بقیه شما را مسخره کنند. مهم نیست. قبول دارم ترسناک است و آدم ناراحت می‌شود ولی باید پیه‌اش را به تنمان بمالیم. خوشبختانه حداقل در جامعه امنیت دنیا افرادی که انگلیسی زبان اولشان نیست مورد تمسخر زیادی قرار نمی‌گیرند. مثلاً دیگر مهم نیست که فلان سخنران با لهجه خاصی انگلیسی صحبت می‌کند.\nیکی از سریعترین راه‌ها برای بهترشدن نوشته‌، استفاده از سرویس‌هایی مانند Grammarly است. متن خود را در نگارش مجانی این سرویس تست کنید. به دو نکته دقت کنید:\n فقط طوطی‌وار مشکلات را اصلاح نکنید بلکه ببینید چرا غلط داشتید و درستش چیست. کم کم یاد می‌گیرید که چگونه بنویسید. ولی، به آن وابسته نشوید. متون سِرّی را به این سرویس‌ها ندهید. مثلاً من فقط بلاگ‌های عمومی خودم را قبل از انتشار تصحیح می‌کنم و نه باگی که در محل کارم پیدا کرده‌ام.  سوال و جواب  نمیشه فقط فیلم ببینم؟ نه! پس بقیه مثل خواندن و شنیدن و صحبت چه شد؟ همه مقداری خواندن را در مدرسه یاد گرفته‌ایم. فرض بر این است که می‌توانید کجدار و مریز بخوانید و بنویسید. اگر حوصله خواندن زبان نداشته باشم چه؟ نخوانید. اگر زبانم بد بود و خجالت کشیدم چه؟ مگر همه در خانواده با زبان انگلیسی بزرگ شدیم؟ همه باید از یکجا شروع کنیم و چه وقتی بهتر از الان. چرا فارسی ننویسیم؟ هم فارسی بنویسید و هم انگلیسی. حتما باید نوشته‌هایم را منتشر کنم؟ نه. اجباری نیست ولی بدون انتشار کسی نمی‌داند شما چقدر بلد هستید. آخر من چیزی بلد نیستم؟ چرا بلد نیستید؟ خوب هم بلدید. بالاخره یک چیزی هست که در مورد آن بدانید. در همان مورد بنویسید. این خود بهانه‌ای می‌شود که در مورد آن تحقیق کنید و بیشتر یاد بگیرید. آیا نوشتن پست‌های تخصصی با دانش ابتدایی مشکلی ندارد؟ نخیر که ندارد. کسی علامه به دنیا نیامده است. نوشتن پست تخصصی در مورد موضوعات ابتدایی خیلی هم خوب است. چند صد بلاگ در مورد Cross-Site Scripting نوشته شده‌اند. هر نوشته جدید یک نگاه جدید است و ممکن است خواننده از آن چیز جدیدی یاد بگیرد. نمیشه فارسی بنویسیم و یکی ترجمه کند؟ بیخود! حالا فیلم ببینم نمیشه؟ ای بابا!  ","permalink":"https://parsiya.github.io/parsiya.fa/post/2021/english/","summary":"یازده سال پیش برای پر کردن رزومه در دانشگاه آزاد چند ترم درس دادم. یکی از درس‌هایم \u0026ldquo;زبان تخصصی کامپیوتر\u0026rdquo; بود. همیشه به بچه‌ها می‎‌گفتم که مهمترین درسی که در دانشگاه یاد می‌گیرید همین است. هنوز هم روی حرفم هستم. ساختمان داده و برنامه‌نویسی و غیره مهم نیست، زبان بخوانید.\nپس زبان انگلیسی خیلی خوب است؟ نه، کلی مزخرف هم به زبان انگلیسی چاپ شده است. ولی، زبان انگلیسی زبان علمی جهان است.","title":"در اهمیت زبان انگلیسی"},{"content":"در این پست تجربه خودم در راه‌اندازی یک بلاگ فارسی بر پایه Hugo روی صفحات گیت‌هاب (Github Pages) را می‌نویسم. نوشتن این تجربیات به من کمک می‌کند که اگر در آینده خواستم کاری را تکرار کنم چرخ را دوباره اختراع نکنم.\nنگارش انگلیسی این نوشته (با کمی تغییر) را در لینک زیر می‎‌توانید ببینید:\n https://parsiya.net/blog/2021-02-17-automagically-deploying-websites-with-custom-domains-to-github-pages/  چرا گیت‌هاب؟ در سایت انگلیسی من نمی‌توان فارسی نوشت چون قالب سایت از راست-به-چپ پشتیبانی نمی‌کند. سایت اصلی من بر روی AWS قرار دارد که متاسفانه در ایران قابل دسترسی نیست. اما صفحات گیت‌هاب علاوه بر مجانی بودن دیگر شامل تحریم نیستند. گیت‌هاب پس از دو سال سر و کله زدن توانسته است مجوز مربوطه را بگیرد.\nچرا Hugo؟ صفحات گیت‌هاب به صورت native از Jekyll پشتیبانی می‌کنند ولی کار با Hugo برای من راحت‌تر است. تقریباً تمام سایتهای من توسط Hugo تولید شده‌اند. اکثر اینstatic website generator ها (مولّد سایت استاتیک؟) روش کاری یکسانی دارند. شما مطالب را با فرمت markdown می‌نویسید و بقیه کار را به آنها می‌سپارید.\nلزومی ندارد حتماً از هوگو و یا جِکیل استفاده کنید، هر مولّدی که با آن راحت‌تر هستید را انتخاب کنید. راهنمای استفاده از آن برای صفحات گیتهاب وجود دارد. خوشبختانه دیگر نیازی به اجرای دستی بسیاری از مراحل نیست و Github actions به کمک ما می‌آیند.\nروش استفاده  کل سایت در یک repository (مخزن؟) گیت در گیت‌هاب ذخیره می‌شود. مطالب را به فرمت markdown می‌نویسید و در یک یا چند کامیت به مخزن اضافه می‌کنید. پس از هر کامیت یک Github action سایت را تولید می‌کند. سایت تولید شده در یک branch (شاخه؟) مجزا ذخیره می‌شود. گیت‌هاب این شاخه را به عنوان یک سایت serve (فارسیش چی میشه؟) می‌کند.  دانش پیشین برای این پست شما باید یکسری موارد را بدانید:\n آشنایی با Hugo (اگر از مولّد سایت دیگری استفاده می‌کنید می‌توانید بخشهای مربوط به Hugo را سرسری رد شوید). آشنایی با گیت  انواع صفحات گیت‌هاب بر روی گیت‌هاب می‌توانیم سه نوع سایت مختلف داشته باشیم:\n سایت کاربر یا user site: هر نام کاربری می‌تواند یک سایت در آدرس username.github.io داشته باشد. سایت سازمان یا organization site: مشابه صفحه کاربر است. مثلاٌ https://microsoft.github.io. سایت پروژه یا project site: هر پروژه می‌تواند یک سایت مجزا داشته باشد. آدرس سایت پروژه وابسته به نام کاربری یا سازمانی است که صاحب اکانت است.  من از سایت فارسی خودم برای مثال استفاده می‌کنم که یک سایت پروژه است:\n آدرس سایت: https://parsiya.github.io/parsiya.fa/ آدرس مخزن سایت: https://github.com/parsiya/parsiya.fa  قالب با متن راست-به-چپ قالب سایت من قابلیت راست-به-چپ ندارد. آن را خودم از Octopress به Hugo منتقل کرده‌ام و از css چیز زیادی نمی‌دانم. تصمیم گرفتم از قالب دیگری استفاده کنم. بعد از چند انتخاب به قالب hugo-PaperMod رسیدم. Hugo از زبانهای مختلف در سایت پشتیبانی می‌کند. معمولاً این برای انتشار نسخه‌های یک صفحه (یا سایت) به چند زبان استفاده می‌شود. شما یک صفحه را به انگلیسی و فارسی می‌نویسید و Hugo بقیه کار را انجام می‌دهد.\nمن تنها می‌خواهم به فارسی بنویسم پس نیازی به استفاده از چند زبان ندارم. این موارد را به config.yml سایتم اضافه کردم:\nlanguageCode: fa defaultContentLanguage: fa languages: fa: languagedirection: rtl weight: 1 استفاده از فونت وزیر کار دیگر استفاده از فونت فارسی وزیر بود. ویرگول از این فونت استفاده می‌کند و من هم می‌خواستم از آن استفاده کنم. خوشبختانه این فونت یک مجوز باز برای استفاده دارد.\nمرحله اول دانلود فونت وزیر و قراردادن آن در دایرکتوری static سایت بود. هر چیزی که در static باشد عیناً به خود سایت اضافه می‌شود. فونت دو بخش دارد یکی خود فایل‌های فونت و دیگر css. اینها را در دایرکتوری‎‌های جداگانه قرار دادم (این کار لزومی ندارد ولی خوشگل‌تر است).\nمرحله دوم اضافه کردن css فونت به قالب بود. در Hugo برای شخصی‌سازی قالب نیازی به دستکاری مستقیم آن نیست. برای اضافه کردن css باید فایل مربوط به بخش head هر صفحه قالب را دستکاری می‌کردم. در این قالب برای دستکاری این بخش می‌توان از فایل extend-head.html استفاده کرد.\nیک کپی از این فایل را در خود سایت ایجاد کردم که در https://github.com/parsiya/parsiya.fa/blob/main/layouts/partials/extend_head.html است. هنگام تولید سایت محتویات این فایل مستقیما به تگ head هر صفحه اضافه می‌شود.\nاستفاده از چنین فایل‌هایی یکی از روش‌های خوب قالب‌ها برای شخصی‌سازی است. اگر چنین فایلی نبود باید کل layout/partials/head.html قالب را کپی و دستکاری می‌کردم (که البته آخر دنیا هم نبود). تا قبل از نوشتن این مقاله از همین روش استفاده کرده بودم.\nایجاد workflow اکنون وقت ایجاد Github action است. برای تولید یک سایت توسط Hugo از راهنمای زیر استفاده کردم (که اشتباهات کوچکی هم داشت):\n https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action  نیازی به دستکاری این فایل نبود و عیناً آن را در مخزن سایت کپی کردم.\n https://github.com/parsiya/parsiya.fa/blob/main/.github/workflows/gh-pages.yml  به طور خلاصه، هر کامیت در شاخه main باعث شروع action می‌شود و سایت را تولید و سپس در شاخه gh-pages ذخیره می‌کند.\nیک نمونه از اجرای این action را می‌توانید در این لینک ببینید. با push کردن کامیتی که حاوی پست جدید (همین پست در بلاگ فارسی است، این action آن را منتشر کرده). روی هر کدام از مراحل مانند Setup Hugo یا Deploy کلیک کنید تا جزئیات را ببینید.\nتنظیمات صفحه گیت‌هاب داخل هر مخزن در بخش settings/pages می‌توان شاخه‌ای که دارای صفحات سایت است را مشخص کرد. این کار را باید بعد از ایجاد شاخه در مخزن انجام دهید چون شاخه‌ای که وجود ندارد را نمی‌توانید انتخاب کنید.\nدامنه شخصی کار من در اینجا تمام شد امّا هر کدام از این سایتها می‌توانند دامنه مخصوص به خود را داشته باشند. مثلاً یکی از سایتهای من به اسم begbounty.com یک سایت پروژه در مخزن https://github.com/parsiya/begbounty.com است. راهنماهای زیادی برای استفاده از دامنه شخصی برای سایت‌های کاربران و سازمانها بود ولی تنظیمات برای سایتهای پروژه نتایج جستجوی زیادی نداشت.\nبرای این کار باید به تنظیمات DNS دامنه خود دسترسی داشته باشید. چند تا از دامنه‌های من در namecheap هستند و این قابلیت را دارند. همه رکوردهای DNS دامنه خود را پاک کنید.\nاول چهار A Record اضافه کردم. host این رکوردها @ و مقدار آنها ip های زیر است:\n 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153  سپس یک رکورد CNAME با host با مقدار زیر (نقطه اضافی در آخر مقدار را فراموش نکنید):\nparsiya.github.io. نکته امنیتی: از wildcard در این رکورد CNAME استفاده نکنید. مثلاً ننویسید:\n*.whatever.com اگر چنین تنظیمی داشته باشید هر اکانت گیت‌هاب می‌تواند یک سایت را در subdomain های سایت شما هاست (همون host که نمی‌دونم فارسیش چی میشه) کُنَد. انگلیسی این اخطار را در این صفحه بخوانید.\nکار بعدی رفتن داخل تنظیمات صفحه در گیت‌هاب بود. در بخش Custom Domain دامنه را وارد کردم.\nاین کار یک کامیت جدید تولید می‌کند. این کامیت یک فایل به نام CNAME را به مخزن اضافه می‌کند. مقدار این فایل همان دامنه‌ای است که در بخش قبل استفاده کردیم. صفحات گیت‌هاب از این فایل برای تشخیص دامنه شخصی استفاده می‌کند.\nاگر راهنمای Hugo برای صفحات گیت‌هاب را دنبال کرده باشید یک فایل مشابه در دایرکتوری static مخزن دارید. واقعاً نمی‌دانم هر دوی این فایلها لازم هستند و یا خیر. ولی وقتی سایت کار می‌‎‌کند دستکاری آن فایده‌ای ندارد.\nمشکلات یک مشکل بزرگ عدم پشتیبانی Visual Studio Code از راست-به-چپ است. تقریباً همه نوشته‌های من در این ادیتور است. این کار سرعت من را پایین آورد چون مجبور شدم از ادیتور Notepad++ استفاده کنم. در VS Code من تعداد زیادی snippet و shortcut دارم که سرعتم را زیاد می‌کنند.\nمشکل بعدی انتخاب کم قالب است. قالبهایی که از راست-به-چپ پشتیبانی می‌کنند کم هستند. علاقه زیادی به PaperMod ندارم (قالب خوبی است ولی من دوست ندارم) ولی از بقیه بهتر بود.\nبزرگترین مشکل هم نوشتن به فارسی است که زبانم (دستم؟) نمی‌چرخد. همین معادلسازی یا نیم‌فاصله (ctrl+shift+2) پدر من را درآورده اند 😂.\nچی یاد گرفتم؟ این بخشی است که من در تقریباً همه مقاله‌هایم می‌نویسم.\nیادگرفتم که اگر خواستم بلاگ فارسی بر پایه Hugo در صفحه گیت‌هاب (و با دامنه مخصوص) داشته باشم چکار کنم.\n","permalink":"https://parsiya.github.io/parsiya.fa/post/2021/github-actions-farsi-site/","summary":"در این پست تجربه خودم در راه‌اندازی یک بلاگ فارسی بر پایه Hugo روی صفحات گیت‌هاب (Github Pages) را می‌نویسم. نوشتن این تجربیات به من کمک می‌کند که اگر در آینده خواستم کاری را تکرار کنم چرخ را دوباره اختراع نکنم.\nنگارش انگلیسی این نوشته (با کمی تغییر) را در لینک زیر می‎‌توانید ببینید:\n https://parsiya.net/blog/2021-02-17-automagically-deploying-websites-with-custom-domains-to-github-pages/  چرا گیت‌هاب؟ در سایت انگلیسی من نمی‌توان فارسی نوشت چون قالب سایت از راست-به-چپ پشتیبانی نمی‌کند.","title":"توسعه و میزبانی سایت روی صفحات گیت‌هاب"},{"content":"این اولین بانتیِ PlayStation من و اولین متن فارسیِ من درباره امنیت است. متون فارسی در سایت خودم به دلیل راست به چپ بودن درست نمایش داده نمی‌شدند، این شد که یک تِمِ Hugo را دستکاری کردم.\nنوشتن در مورد امنیت برای من به زبان فارسی سختِ. خودم را \u0026ldquo;خارجی\u0026rdquo; حساب نمی‌کنم ولی امنیت و اصطلاحاتش را به زبان انگلیسی یاد گرفته ام و زبانِ کار روزمره‌ام هست. در مقابل مثلاً در زمینه \u0026ldquo;کلیله و دمنه\u0026rdquo; به انگلیسی نمی‌توانم صحبت کنم.\nاگر مشکل زبان انگلیسی ندارید (خواندن گزارش زبان سطح بالایی لازم ندارد)، پیشنهاد من خواندن متن اصلی باگ در سایت هکروان است:\n https://hackerone.com/reports/873614  مقدمات این گزارش ترکیبی از سه باگ منطقی مختلف است. هر کدام از این باگها در یک محدوده تحقیقاتی مختلف قرار دارند. برای یادگرفتن این باگ ها شاید لازم باشد که موارد زیر را بدانید. در خیلی از موارد توضیحات مفصلی ندادم چون نمی‌شود همه چیز را در گزارش توضیح داد.\n نزدیک یک سال قبل من ارائه ای در مورد این باگ ها (این باگ هنوز disclose نشده بود) در Appsec village کنفرانس DEF CON 2020 داشتم. در آن یکی از باگ های مشابه خودم برای برنامه Attack Surface Analyzer مایکروسافت را بررسی کردم. ویدئو و اسلاید این ارائه در لینک زیر هستند:  https://parsiya.net/blog/2020-08-13-localghost-escaping-the-browser-sandbox-without-0-days/   اطلاعات مربوط به هک برنامه های فریمورک الکترون  https://github.com/doyensec/awesome-electronjs-hacking   پیدا کردن سرورهای localhost و ترافیک برنامه های ویندوز  https://parsiya.net/blog/2015-08-01-network-traffic-attribution-on-windows   باگ های Tavis Ormandy از Google Project Zero درباره سرورهای localhost  https://bugs.chromium.org/p/project-zero/issues/list?q=owner%3Ataviso%40google.com%20localhost\u0026amp;can=1    خلاصه برنامه PlayStation Now نگارش 11.0.2 دارای آسیب پذیری \u0026ldquo;اجرای کد از راه دور\u0026rdquo; یا Remote Code Execution (RCE) است. هر وب سایتی که در کامپیوتری که برنامه را اجرا می‌کند باز شود می‌تواند از طریق یک websocket روی آن ماشین کد اجرا کند.\n سرور websocket که روی پورت 1235 اجرا می‌شود هدر origin ریکوئست ها را چک نمی‌کند. این به وب سایتهایی که روی ماشین باز شده‌اند اجازه می‌دهد که مستقیم به این سرور متصل شوند و داده بفرستند.  websocket ها توسط Same-Origin Policy کنترل نمی‌شوند. یک وب سایت باز شده در مرورگر می‌تواند یک ارتباط websocket با هر سرور در دسترس ایجاد کند.   برنامه psnow یک برنامه Electron به نام AGL را اجرا می‌کند. با فرستادن داده به سرور websocket، می‌توان به AGL دستور داد تا هر URL را بارگزاری کند.  در نتیجه، هر وب سایت باز شده در ماشین می‌تواند به AGL دستور دهد تا هر URL که می‌خواهد را باز کند. همچنین می‌توان توسط دستور setUrlDefaultBrowser به AGL دستور داد که یک executable را اجرا کند (مثلاً calc).   در برنامه AGL فیلد nodeIntegration فعال است. یعنی کد جاواسکریپت وب سایت باز شده در AGL میتواند از کتابخانه‌های Node استفاده کند.  با سر هم کردن این سه باگ می‌توانیم به RCE برسیم.\nاصل ماجرا برنامه PlayStation Now یک برنامه برای استریم بازیهای پلی استیشن روی ویندوز است (البته این برنامه روی کنسول PS4 هم وجود دارد اما اینجا در مورد آن صحبت نمی‌کنیم). این برنامه دو بخش اصلی دارد. QAS و AGL.\nبرنامه QAS این برنامه اصلی بر پایه فریمورک Qt 5 (کیوت یا cute تلفظ می‌شود). اسم اصلی این برنامه psnowlauncher.exe است. بعد از اجرا دو کار انجام می‌دهد:\n برنامه دیگری به نام AGL.exe را اجرا می‌کند. یک سرور websocket در آدرس localhost:1235 می‌سازد.  برنامه AGL برنامه AGL بر پایه فریمورک Electron است. این برنامه توسط QAS و به صورت زیر با یک سوییچ url اجرا می‌شود.\n\u0026quot;C:\\Program Files (x86)\\PlayStationNow\\agl\\agl.exe\u0026quot; --url=https://psnow.playstation.com/app/1.10.43/105/00d3603f8/ بعد از اجرای برنامه، وب سایتی که با سوییچ url مشخص شده در برنامه باز می‌شود.\nفریمورک Electron هم Qt و هم Electron از فریمورک های پرطرفدار ساخت برنامه های دسکتاپ هستند. فریمورک الکترون بر پایه مرورگر متن باز Chromium ساخته شده است. مرورگرهای مشهوری مانند Chrome, Edge و Brave هم از آن استفاده می‌کنند. به خلاصه، هر صفحه یک برنامه الکترون یک تب مرورگر است که در آن یک صفحه وب نمایش داده می‌شود.\nیکی از اصلی ترین نکات هنگام بررسی یک برنامه الکترون بررسی فیلد nodeIntegration است. در صورت فعال بودن (به صورت پیش فرض غیرفعال است) کد جاوااسکریپت داخل مرورگر می‌تواند از کتابخانه‌های Node استفاده کند. من از دو روش برای چک کردن این فیلد استفاده می‌کنم:\n بازکردن کد برنامه و static analysis: کد جاوااسکریپت برنامه Electron معمولاً در یک فایل به نام app.asar است که می‌توان آن را به راحتی باز و مشاهده کرد. بعد از باز کردن کد برنامه سرچ کنید nodeIntegration و ببینید که آیا به مقدار true سِت شده است یا خیر. بازکردن یک وب سایت در برنامه که مثلاً ماشین حساب را اجرا می‌کند.  برای اطلاعات بیشتر به این رفرنس که در قسمت مقدمات معرفی کردم مراجعه کنید.\nمشکل اول: nodeIntegration برای تست این فیلد من از روش دوم استفاده کردم. یک صفحه با کد زیر را در یک s3 bucket (سطل؟) ذخیره کردم. این کد ماشین حساب ویندوز را از طریق ماژول child_process اجرا می‌کند.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;This should pop calc on Windows\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; require(\u0026#39;child_process\u0026#39;) .exec(\u0026#39;calc\u0026#39;) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; سپس برنامه را دستی با سویچ url اجرا کردم.\n\u0026quot;C:\\Program Files (x86)\\PlayStationNow\\agl\\agl.exe\u0026quot; --url=https://[redacted].s3.us-east-1.amazonaws.com/node.html ماشین حساب ویندوز اجرا شد و معلوم که مقدار آن فیلد سِت شده است.\nتا اینجا کار خارق العاده ای انجام ندادم، روی کامپیوتر خودم دستی کد اجرا کرده‌ام. به قول این بلاگ، هنوز در سمت دیگر \u0026ldquo;دریچه\u0026rdquo; (یعنی روی کامپیوتر خودم) هستم.\n https://devblogs.microsoft.com/oldnewthing/20060508-22/?p=31283  مشکل دوم: سرور websocket همانطور که بالا دیدیم برنامه AGL روی پورت 1235 یک سرور websocket می‌سازد. قدم بعدی پراکسی کردن برنامه توسط Burp بود. برنامه های بر پایه مرورگر Chromium معمولاً از تنظیمات پراکسی ویندوز استفاده می‌کنند.\nپراکسی کردن ترافیک برنامه های دسکتاپ پراکسی کردن ترافیک این برنامه ساده بود ولی همیشه اینگونه نیست. این بحث مفصلی است و من تا امروز 18 بلاگ درباره آن نوشته‌ام و هنوز جا برای تحقیق زیاد دارد\n https://parsiya.net/categories/thick-client-proxying  بعد از پراکسی کردن این برنامه ها ترافیک زیادی در Burp دیدم. یکی از مشکلات پراکسی کردن با تنظیمات ویندوز این است که بسیاری از برنامه های دیگر و سرویس های ویندوز نیز ترافیک خود را به پراکسی می‌فرستند. برای این کار می‌توانید دامنه‌های بی‌ربط را به TLS Passthrough اضافه کنید تا Burp آنها را پراکسی نکند. برای اطلاعات بیشتر بلاگ زیر را بخوانید:\n https://parsiya.net/blog/2020-05-01-towards-a-quieter-burp-history  ترافیک برنامه‌ها را توسط user-Agent شان تشخیص دادم. هر دو برنامه کلمه gkApollo را در user-agent داشتند. پس بقیه ترافیک به درد من نمیخورد. برای تشخیص ترافیک این دو برنامه از هم به کلمات دیگر در user-agent دقت کردم:\n ترافیک برنامه QAS که بر پایه Qt است این کلمه را دارد QtWebEngine/5.5.1. ترافیک برنامه AGL که بر پایه الکترون است این دو را دارد Electron/1.4.16 و playstation-now/0.0.0.  توسط یک افزونه به نام Request Highlighter در Burp ترافیک این دو برنامه را زرد و آبی کردم که تشخیص آنها از هم راحت‌تر باشد.\nپروتکل پیام های websocket پس از پراکسی کردن در Burp ترافیک سرور websocket را می‌بینیم. پیام‌های پروتکل این سرور بسیار ساده بودند و به نظر می‌رسید توسط JSON.stringify ‌جاوااسکریپت ایجاد شده‌اند. .پیام ها به این شکل بودند:\n{ \u0026#34;command\u0026#34;: \u0026#34;isMicConnected\u0026#34;, \u0026#34;params\u0026#34;: {}, \u0026#34;source\u0026#34;: \u0026#34;AGL\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;QAS\u0026#34; }  فرمان یا command که مشخص می‌کند این دستور باید چه کاری انجام دهد. پارامترهای دستور. بخشهای سوم و چهارم مبدا و مقصد پیام هستند. در واقع مبدا پیام مهم نیست و فقط مقصد مهم است.  برای دیدن اینکه چه دستورهایی در برنامه وجود دارند دو کار کردم:\n برنامه را اجرا کردم و چند کار داخل برنامه انجام دادم سپس ترافیک داخل Burp را دیدم. کد برنامه الکترون را باز کردم و اسم چند دستور که در Burp دیده بودم را سرچ کردم تا به بخش commandHandler رسیدم. در این بخش همه دستورات سرور وجود داشتند.  دو دستور مهم هستند: setUrl و setUrlDefaultBrowser.\nsetUrl به برنامه می‌گوید که کدام وب سایت را باز کند. پیام این دستور به این شکل است:\n{ \u0026#34;command\u0026#34;: \u0026#34;setUrl\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://psnow.playstation.com/app/1.10.43/105/00d3603f8/\u0026#34; }, \u0026#34;source\u0026#34;: \u0026#34;AGL\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;QAS\u0026#34; } setUrlDefaultBrowser یک فایل را به کمک سیستم عامل باز می‌کند. مثلاَ اگر ورودی آن یک آدرس وب سایت باشد، آن را در مرورگر باز می‌کند و یک فایل ورد در برنامه آفیس (اگر نصب شده باشد) باز می‌شود. چند روز بعد از گزارش باگ به من به یاد یکی از باگ های Tavis Ormandy افتادم که با استفاده از این دستور به RCE دست یافته بود.\n https://bugs.chromium.org/p/project-zero/issues/detail?id=693  اگر یک فایل اجرایی را با این دستور باز کنیم، ویندوز خود آن فایل را اجرا می‌کند. پس دستور زیر ماشین حساب ویندوز را اجرا می‌کند.\n{ \u0026#34;command\u0026#34;: \u0026#34;setUrl\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;file:///c:/windows/system32/calc.exe\u0026#34; }, \u0026#34;source\u0026#34;: \u0026#34;AGL\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;QAS\u0026#34; } با استفاده از این دستور دیگر نیاز به nodeIntegration هم نداریم. اما این دستور یک محدودیت بزرگ دارد. فقط می‌توانیم فایل اجرا کنیم و نمی‌توانیم به فایل اجرایی پارامتر و یا سوییچ بفرستیم.\nمشکل سوم: اجرای کد روی ماشین توسط دستورات websocket در Burp دیدم که برنامه AGL (الکترون) به QAS می‌گوید که یک وب سایت را باز کند. در ابتدا من به مبدا و مقصد دقت نکردم و بی‌خیال باگ شدم چون بازکردن سایت در QAS فایده‌ای برای من نداشت. اما چند ساعت بعد وقتی کار دیگری انجام می‌دادم یادم آمد که چرا مقصد را AGL (برنامه الکترون) نگذارم؟ با فرستادن پیام پایین وب سایتی که در بخش اول ساخته بودم (ماشین حساب ویندوز را اجرا می‌کرد) در برنامه الکترون باز کردم و ماشین حساب ویندوز اجرا شد.\n{ \u0026#34;command\u0026#34;: \u0026#34;setUrl\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://example.net\u0026#34; }, \u0026#34;source\u0026#34;: \u0026#34;AGL\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;QAS\u0026#34; } بعد از این کد یک برنامه چت بر پایه websocket را دستکاری کردم و در سطل (؟) s3 دیگری قرار دادم. بعد از باز کردن این وب سایت در مرورگر روی کامپیوتری که برنامه psnow در حال اجرا بود می‌توانستم با سرور websocket صحبت کنم و به آن دستور بفرستم.\nامنیت websocket اولین مرحله در ایجاد ارتباط با یک سرور websocket، فرستادن یک ریکوئست HTTP با تعدادی هِدِر (header) خاص است. در حالت عادی Same-Origin Policy یا SOP مرورگر به اسکریپت‌های یک اریجین اجازه نمی‌دهد تا با اریجین دیگر ارتباط برقرار کنند (بحث SOP مفصلتر از این است که اینجا مطرح کنم ولی حتماً در مورد آن بخوانید چون یکی از مهمترین بخشهای امنیت مرورگر و وب است). websocket ها شامل SOP نمیشوند. یعنی هر وب سایت میتواند با هر سرور websocket ارتباط برقرار کند.\nحل این مشکلات تا اینجا سه باگ را بررسی کردیم و فهمیدیم که اگر برنامه PlayStation Now را اجرا کنیم. وب سایتی که در مرورگر کامپیوتر ما باز شده است می‌تواند روی ماشین ما کد اجرا کند. این اصلاً خوب نیست.\nیکی از مهمترین وظایف من به عنوان یک مهندس امنیت نرم افزار، حل مشکلات امنیتی است. راحت‌ترین روش حل این مشکل چک کردن هدر origin در اولین قدم ایجاد ارتباط websocket است. این هدر فقط توسط مرورگر می‌تواند اضافه شود1. اولین ریکوئست ایجاد یک websocket شکلی مشابه این دارد:\nGET /chat HTTP/1.1 Host: example.com:8000 Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== - مقدار این هدر معمولاً مهم نیست Sec-WebSocket-Version: 13 Origin: whatever.com چون نمی‌توان به مکانیزم SOP برای فیلتر کردن درخواست های websocket اتکا کرد باید به صورت دستی هدر origin را بررسی کنیم و مواردی که نمی‌خواهیم (مثلاً هر چه که از playstation.com.* نیست) را رد کنیم.\nدومین مشکل این است که سرور روی همه IP های دستگاه در حال شنیدن است. به عبارت دیگر روی 0.0.0.0 بایند شده. این یعنی هر کسی که بتواند به پورت 1235 دستگاه از خارج دسترسی داشته باشد می‌تواند به آن وصل شود. در دنیای واقعی این مشکل آنقدر ترسناک نیست زیرا اکثر مودم و روترها تنها اجازه دسترسی مستقیم به پورت را در شبکه داخلی می‌دهند. برای حل این مشکل باید سرور روی localhost بایند شود.\nچی یاد گرفتیم؟ متاسفانه در این باگ مرزهای علم را جابجا نکردم و دانش جدیدی تولید نشد. خودم هم چیز جدیدی یاد نگرفتم. اما امیدوارم خواننده چند نکته یادگرفته باشد. اگر بازخورد یا پیشنهادی دارید، پیدا کردن من در اینترنت بسیار راحت است.\n  به این هدرها forbidden header می‌گویند.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://parsiya.github.io/parsiya.fa/post/2021/psnow/","summary":"این اولین بانتیِ PlayStation من و اولین متن فارسیِ من درباره امنیت است. متون فارسی در سایت خودم به دلیل راست به چپ بودن درست نمایش داده نمی‌شدند، این شد که یک تِمِ Hugo را دستکاری کردم.\nنوشتن در مورد امنیت برای من به زبان فارسی سختِ. خودم را \u0026ldquo;خارجی\u0026rdquo; حساب نمی‌کنم ولی امنیت و اصطلاحاتش را به زبان انگلیسی یاد گرفته ام و زبانِ کار روزمره‌ام هست. در مقابل مثلاً در زمینه \u0026ldquo;کلیله و دمنه\u0026rdquo; به انگلیسی نمی‌توانم صحبت کنم.","title":"آسیب پذیری Remote Code Execution در PlayStation Now"}]