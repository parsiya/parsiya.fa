[{"content":"در این پست تجربه خودم در راه‌اندازی یک بلاگ فارسی بر پایه Hugo روی صفحات گیت‌هاب (Github Pages) را می‌نویسم. نوشتن این تجربیات به من کمک می‌کند که اگر در آینده خواستم کاری را تکرار کنم چرخ را دوباره اختراع نکنم.\nنگارش انگلیسی این نوشته (با کمی تغییر) را در لینک زیر می‎‌توانید ببینید:\n https://parsiya.net/blog/2021-02-17-automagically-deploying-websites-with-custom-domains-to-github-pages/  چرا گیت‌هاب؟ در سایت انگلیسی من نمی‌توان فارسی نوشت چون قالب سایت از راست-به-چپ پشتیبانی نمی‌کند. سایت اصلی من بر روی AWS قرار دارد که متاسفانه در ایران قابل دسترسی نیست. اما صفحات گیت‌هاب علاوه بر مجانی بودن دیگر شامل تحریم نیستند. گیت‌هاب پس از دو سال سر و کله زدن توانسته است مجوز مربوطه را بگیرد.\nچرا Hugo؟ صفحات گیت‌هاب به صورت native از Jekyll پشتیبانی می‌کنند ولی کار با Hugo برای من راحت‌تر است. تقریباً تمام سایتهای من توسط Hugo تولید شده‌اند. اکثر اینstatic website generator ها (مولّد سایت استاتیک؟) روش کاری یکسانی دارند. شما مطالب را با فرمت markdown می‌نویسید و بقیه کار را به آنها می‌سپارید.\nلزومی ندارد حتماً از هوگو و یا جِکیل استفاده کنید، هر مولّدی که با آن راحت‌تر هستید را انتخاب کنید. راهنمای استفاده از آن برای صفحات گیتهاب وجود دارد. خوشبختانه دیگر نیازی به اجرای دستی بسیاری از مراحل نیست و Github actions به کمک ما می‌آیند.\nروش استفاده  کل سایت در یک repository (مخزن؟) گیت در گیت‌هاب ذخیره می‌شود. مطالب را به فرمت markdown می‌نویسید و در یک یا چند کامیت به مخزن اضافه می‌کنید. پس از هر کامیت یک Github action سایت را تولید می‌کند. سایت تولید شده در یک branch (شاخه؟) مجزا ذخیره می‌شود. گیت‌هاب این شاخه را به عنوان یک سایت serve (فارسیش چی میشه؟) می‌کند.  دانش پیشین برای این پست شما باید یکسری موارد را بدانید:\n آشنایی با Hugo (اگر از مولّد سایت دیگری استفاده می‌کنید می‌توانید بخشهای مربوط به Hugo را سرسری رد شوید). آشنایی با گیت  انواع صفحات گیت‌هاب بر روی گیت‌هاب می‌توانیم سه نوع سایت مختلف داشته باشیم:\n سایت کاربر یا user site: هر نام کاربری می‌تواند یک سایت در آدرس username.github.io داشته باشد. سایت سازمان یا organization site: مشابه صفحه کاربر است. مثلاٌ https://microsoft.github.io. سایت پروژه یا project site: هر پروژه می‌تواند یک سایت مجزا داشته باشد. آدرس سایت پروژه وابسته به نام کاربری یا سازمانی است که صاحب اکانت است.  من از سایت فارسی خودم برای مثال استفاده می‌کنم که یک سایت پروژه است:\n آدرس سایت: https://parsiya.github.io/parsiya.fa/ آدرس مخزن سایت: https://github.com/parsiya/parsiya.fa  قالب با متن راست-به-چپ قالب سایت من قابلیت راست-به-چپ ندارد. آن را خودم از Octopress به Hugo منتقل کرده‌ام و از css چیز زیادی نمی‌دانم. تصمیم گرفتم از قالب دیگری استفاده کنم. بعد از چند انتخاب به قالب hugo-PaperMod رسیدم. Hugo از زبانهای مختلف در سایت پشتیبانی می‌کند. معمولاً این برای انتشار نسخه‌های یک صفحه (یا سایت) به چند زبان استفاده می‌شود. شما یک صفحه را به انگلیسی و فارسی می‌نویسید و Hugo بقیه کار را انجام می‌دهد.\nمن تنها می‌خواهم به فارسی بنویسم پس نیازی به استفاده از چند زبان ندارم. این موارد را به config.yml سایتم اضافه کردم:\nlanguageCode: fa defaultContentLanguage: fa languages: fa: languagedirection: rtl weight: 1 استفاده از فونت وزیر کار دیگر استفاده از فونت فارسی وزیر بود. ویرگول از این فونت استفاده می‌کند و من هم می‌خواستم از آن استفاده کنم. خوشبختانه این فونت یک مجوز باز برای استفاده دارد.\nمرحله اول دانلود فونت وزیر و قراردادن آن در دایرکتوری static سایت بود. هر چیزی که در static باشد عیناً به خود سایت اضافه می‌شود. فونت دو بخش دارد یکی خود فایل‌های فونت و دیگر css. اینها را در دایرکتوری‎‌های جداگانه قرار دادم (این کار لزومی ندارد ولی خوشگل‌تر است).\nمرحله دوم اضافه کردن css فونت به قالب بود. در Hugo برای شخصی‌سازی قالب نیازی به دستکاری مستقیم آن نیست. برای اضافه کردن css باید فایل مربوط به بخش head هر صفحه قالب را دستکاری می‌کردم. در این قالب برای دستکاری این بخش می‌توان از فایل extend-head.html استفاده کرد.\nیک کپی از این فایل را در خود سایت ایجاد کردم که در https://github.com/parsiya/parsiya.fa/blob/main/layouts/partials/extend_head.html است. هنگام تولید سایت محتویات این فایل مستقیما به تگ head هر صفحه اضافه می‌شود.\nاستفاده از چنین فایل‌هایی یکی از روش‌های خوب قالب‌ها برای شخصی‌سازی است. اگر چنین فایلی نبود باید کل layout/partials/head.html قالب را کپی و دستکاری می‌کردم (که البته آخر دنیا هم نبود). تا قبل از نوشتن این مقاله از همین روش استفاده کرده بودم.\nایجاد workflow اکنون وقت ایجاد Github action است. برای تولید یک سایت توسط Hugo از راهنمای زیر استفاده کردم (که اشتباهات کوچکی هم داشت):\n https://gohugo.io/hosting-and-deployment/hosting-on-github/#build-hugo-with-github-action  نیازی به دستکاری این فایل نبود و عیناً آن را در مخزن سایت کپی کردم.\n https://github.com/parsiya/parsiya.fa/blob/main/.github/workflows/gh-pages.yml  به طور خلاصه، هر کامیت در شاخه main باعث شروع action می‌شود و سایت را تولید و سپس در شاخه gh-pages ذخیره می‌کند.\nیک نمونه از اجرای این action را می‌توانید در این لینک ببینید. با push کردن کامیتی که حاوی پست جدید (همین پست در بلاگ فارسی است، این action آن را منتشر کرده). روی هر کدام از مراحل مانند Setup Hugo یا Deploy کلیک کنید تا جزئیات را ببینید.\nتنظیمات صفحه گیت‌هاب داخل هر مخزن در بخش settings/pages می‌توان شاخه‌ای که دارای صفحات سایت است را مشخص کرد. این کار را باید بعد از ایجاد شاخه در مخزن انجام دهید چون شاخه‌ای که وجود ندارد را نمی‌توانید انتخاب کنید.\nدامنه شخصی کار من در اینجا تمام شد امّا هر کدام از این سایتها می‌توانند دامنه مخصوص به خود را داشته باشند. مثلاً یکی از سایتهای من به اسم begbounty.com یک سایت پروژه در مخزن https://github.com/parsiya/begbounty.com است. راهنماهای زیادی برای استفاده از دامنه شخصی برای سایت‌های کاربران و سازمانها بود ولی تنظیمات برای سایتهای پروژه نتایج جستجوی زیادی نداشت.\nبرای این کار باید به تنظیمات DNS دامنه خود دسترسی داشته باشید. چند تا از دامنه‌های من در namecheap هستند و این قابلیت را دارند. همه رکوردهای DNS دامنه خود را پاک کنید.\nاول چهار A Record اضافه کردم. host این رکوردها @ و مقدار آنها ip های زیر است:\n 185.199.108.153 185.199.109.153 185.199.110.153 185.199.111.153  سپس یک رکورد CNAME با host با مقدار زیر (نقطه اضافی در آخر مقدار را فراموش نکنید):\nparsiya.github.io. نکته امنیتی: از wildcard در این رکورد CNAME استفاده نکنید. مثلاً ننویسید:\n*.whatever.com اگر چنین تنظیمی داشته باشید هر اکانت گیت‌هاب می‌تواند یک سایت را در subdomain های سایت شما هاست (همون host که نمی‌دونم فارسیش چی میشه) کُنَد. انگلیسی این اخطار را در این صفحه بخوانید.\nکار بعدی رفتن داخل تنظیمات صفحه در گیت‌هاب بود. در بخش Custom Domain دامنه را وارد کردم.\nاین کار یک کامیت جدید تولید می‌کند. این کامیت یک فایل به نام CNAME را به مخزن اضافه می‌کند. مقدار این فایل همان دامنه‌ای است که در بخش قبل استفاده کردیم. صفحات گیت‌هاب از این فایل برای تشخیص دامنه شخصی استفاده می‌کند.\nاگر راهنمای Hugo برای صفحات گیت‌هاب را دنبال کرده باشید یک فایل مشابه در دایرکتوری static مخزن دارید. واقعاً نمی‌دانم هر دوی این فایلها لازم هستند و یا خیر. ولی وقتی سایت کار می‌‎‌کند دستکاری آن فایده‌ای ندارد.\nمشکلات یک مشکل بزرگ عدم پشتیبانی Visual Studio Code از راست-به-چپ است. تقریباً همه نوشته‌های من در این ادیتور است. این کار سرعت من را پایین آورد چون مجبور شدم از ادیتور Notepad++ استفاده کنم. در VS Code من تعداد زیادی snippet و shortcut دارم که سرعتم را زیاد می‌کنند.\nمشکل بعدی انتخاب کم قالب است. قالبهایی که از راست-به-چپ پشتیبانی می‌کنند کم هستند. علاقه زیادی به PaperMod ندارم (قالب خوبی است ولی من دوست ندارم) ولی از بقیه بهتر بود.\nبزرگترین مشکل هم نوشتن به فارسی است که زبانم (دستم؟) نمی‌چرخد. همین معادلسازی یا نیم‌فاصله (ctrl+shift+2) پدر من را درآورده اند 😂.\nچی یاد گرفتم؟ این بخشی است که من در تقریباً همه مقاله‌هایم می‌نویسم.\nیادگرفتم که اگر خواستم بلاگ فارسی بر پایه Hugo در صفحه گیت‌هاب (و با دامنه مخصوص) داشته باشم چکار کنم.\n","permalink":"https://parsiya.github.io/parsiya.fa/post/github-actions-farsi-site/","summary":"در این پست تجربه خودم در راه‌اندازی یک بلاگ فارسی بر پایه Hugo روی صفحات گیت‌هاب (Github Pages) را می‌نویسم.","title":"توسعه و میزبانی سایت روی صفحات گیت‌هاب"},{"content":"این اولین بانتیِ PlayStation من و اولین متن فارسیِ من درباره امنیت است. متون فارسی در سایت خودم به دلیل راست به چپ بودن درست نمایش داده نمی‌شدند، این شد که یک تِمِ Hugo را دستکاری کردم.\nنوشتن در مورد امنیت برای من به زبان فارسی سختِ. خودم را \u0026ldquo;خارجی\u0026rdquo; حساب نمی‌کنم ولی امنیت و اصطلاحاتش را به زبان انگلیسی یاد گرفته ام و زبانِ کار روزمره‌ام هست. در مقابل مثلاً در زمینه \u0026ldquo;کلیله و دمنه\u0026rdquo; به انگلیسی نمی‌توانم صحبت کنم.\nاگر مشکل زبان انگلیسی ندارید (خواندن گزارش زبان سطح بالایی لازم ندارد)، پیشنهاد من خواندن متن اصلی باگ در سایت هکروان است:\n https://hackerone.com/reports/873614  مقدمات این گزارش ترکیبی از سه باگ منطقی مختلف است. هر کدام از این باگها در یک محدوده تحقیقاتی مختلف قرار دارند. برای یادگرفتن این باگ ها شاید لازم باشد که موارد زیر را بدانید. در خیلی از موارد توضیحات مفصلی ندادم چون نمی‌شود همه چیز را در گزارش توضیح داد.\n نزدیک یک سال قبل من ارائه ای در مورد این باگ ها (این باگ هنوز disclose نشده بود) در Appsec village کنفرانس DEF CON 2020 داشتم. در آن یکی از باگ های مشابه خودم برای برنامه Attack Surface Analyzer مایکروسافت را بررسی کردم. ویدئو و اسلاید این ارائه در لینک زیر هستند:  https://parsiya.net/blog/2020-08-13-localghost-escaping-the-browser-sandbox-without-0-days/   اطلاعات مربوط به هک برنامه های فریمورک الکترون  https://github.com/doyensec/awesome-electronjs-hacking   پیدا کردن سرورهای localhost و ترافیک برنامه های ویندوز  https://parsiya.net/blog/2015-08-01-network-traffic-attribution-on-windows   باگ های Tavis Ormandy از Google Project Zero درباره سرورهای localhost  https://bugs.chromium.org/p/project-zero/issues/list?q=owner%3Ataviso%40google.com%20localhost\u0026amp;can=1    خلاصه برنامه PlayStation Now نگارش 11.0.2 دارای آسیب پذیری \u0026ldquo;اجرای کد از راه دور\u0026rdquo; یا Remote Code Execution (RCE) است. هر وب سایتی که در کامپیوتری که برنامه را اجرا می‌کند باز شود می‌تواند از طریق یک websocket روی آن ماشین کد اجرا کند.\n سرور websocket که روی پورت 1235 اجرا می‌شود هدر origin ریکوئست ها را چک نمی‌کند. این به وب سایتهایی که روی ماشین باز شده‌اند اجازه می‌دهد که مستقیم به این سرور متصل شوند و داده بفرستند.  websocket ها توسط Same-Origin Policy کنترل نمی‌شوند. یک وب سایت باز شده در مرورگر می‌تواند یک ارتباط websocket با هر سرور در دسترس ایجاد کند.   برنامه psnow یک برنامه Electron به نام AGL را اجرا می‌کند. با فرستادن داده به سرور websocket، می‌توان به AGL دستور داد تا هر URL را بارگزاری کند.  در نتیجه، هر وب سایت باز شده در ماشین می‌تواند به AGL دستور دهد تا هر URL که می‌خواهد را باز کند. همچنین می‌توان توسط دستور setUrlDefaultBrowser به AGL دستور داد که یک executable را اجرا کند (مثلاً calc).   در برنامه AGL فیلد nodeIntegration فعال است. یعنی کد جاواسکریپت وب سایت باز شده در AGL میتواند از کتابخانه‌های Node استفاده کند.  با سر هم کردن این سه باگ می‌توانیم به RCE برسیم.\nاصل ماجرا برنامه PlayStation Now یک برنامه برای استریم بازیهای پلی استیشن روی ویندوز است (البته این برنامه روی کنسول PS4 هم وجود دارد اما اینجا در مورد آن صحبت نمی‌کنیم). این برنامه دو بخش اصلی دارد. QAS و AGL.\nبرنامه QAS این برنامه اصلی بر پایه فریمورک Qt 5 (کیوت یا cute تلفظ می‌شود). اسم اصلی این برنامه psnowlauncher.exe است. بعد از اجرا دو کار انجام می‌دهد:\n برنامه دیگری به نام AGL.exe را اجرا می‌کند. یک سرور websocket در آدرس localhost:1235 می‌سازد.  برنامه AGL برنامه AGL بر پایه فریمورک Electron است. این برنامه توسط QAS و به صورت زیر با یک سوییچ url اجرا می‌شود.\n\u0026quot;C:\\Program Files (x86)\\PlayStationNow\\agl\\agl.exe\u0026quot; --url=https://psnow.playstation.com/app/1.10.43/105/00d3603f8/ بعد از اجرای برنامه، وب سایتی که با سوییچ url مشخص شده در برنامه باز می‌شود.\nفریمورک Electron هم Qt و هم Electron از فریمورک های پرطرفدار ساخت برنامه های دسکتاپ هستند. فریمورک الکترون بر پایه مرورگر متن باز Chromium ساخته شده است. مرورگرهای مشهوری مانند Chrome, Edge و Brave هم از آن استفاده می‌کنند. به خلاصه، هر صفحه یک برنامه الکترون یک تب مرورگر است که در آن یک صفحه وب نمایش داده می‌شود.\nیکی از اصلی ترین نکات هنگام بررسی یک برنامه الکترون بررسی فیلد nodeIntegration است. در صورت فعال بودن (به صورت پیش فرض غیرفعال است) کد جاوااسکریپت داخل مرورگر می‌تواند از کتابخانه‌های Node استفاده کند. من از دو روش برای چک کردن این فیلد استفاده می‌کنم:\n بازکردن کد برنامه و static analysis: کد جاوااسکریپت برنامه Electron معمولاً در یک فایل به نام app.asar است که می‌توان آن را به راحتی باز و مشاهده کرد. بعد از باز کردن کد برنامه سرچ کنید nodeIntegration و ببینید که آیا به مقدار true سِت شده است یا خیر. بازکردن یک وب سایت در برنامه که مثلاً ماشین حساب را اجرا می‌کند.  برای اطلاعات بیشتر به این رفرنس که در قسمت مقدمات معرفی کردم مراجعه کنید.\nمشکل اول: nodeIntegration برای تست این فیلد من از روش دوم استفاده کردم. یک صفحه با کد زیر را در یک s3 bucket (سطل؟) ذخیره کردم. این کد ماشین حساب ویندوز را از طریق ماژول child_process اجرا می‌کند.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;This should pop calc on Windows\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;script\u0026gt; require(\u0026#39;child_process\u0026#39;) .exec(\u0026#39;calc\u0026#39;) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; سپس برنامه را دستی با سویچ url اجرا کردم.\n\u0026quot;C:\\Program Files (x86)\\PlayStationNow\\agl\\agl.exe\u0026quot; --url=https://[redacted].s3.us-east-1.amazonaws.com/node.html ماشین حساب ویندوز اجرا شد و معلوم که مقدار آن فیلد سِت شده است.\nتا اینجا کار خارق العاده ای انجام ندادم، روی کامپیوتر خودم دستی کد اجرا کرده‌ام. به قول این بلاگ، هنوز در سمت دیگر \u0026ldquo;دریچه\u0026rdquo; (یعنی روی کامپیوتر خودم) هستم.\n https://devblogs.microsoft.com/oldnewthing/20060508-22/?p=31283  مشکل دوم: سرور websocket همانطور که بالا دیدیم برنامه AGL روی پورت 1235 یک سرور websocket می‌سازد. قدم بعدی پراکسی کردن برنامه توسط Burp بود. برنامه های بر پایه مرورگر Chromium معمولاً از تنظیمات پراکسی ویندوز استفاده می‌کنند.\nپراکسی کردن ترافیک برنامه های دسکتاپ پراکسی کردن ترافیک این برنامه ساده بود ولی همیشه اینگونه نیست. این بحث مفصلی است و من تا امروز 18 بلاگ درباره آن نوشته‌ام و هنوز جا برای تحقیق زیاد دارد\n https://parsiya.net/categories/thick-client-proxying  بعد از پراکسی کردن این برنامه ها ترافیک زیادی در Burp دیدم. یکی از مشکلات پراکسی کردن با تنظیمات ویندوز این است که بسیاری از برنامه های دیگر و سرویس های ویندوز نیز ترافیک خود را به پراکسی می‌فرستند. برای این کار می‌توانید دامنه‌های بی‌ربط را به TLS Passthrough اضافه کنید تا Burp آنها را پراکسی نکند. برای اطلاعات بیشتر بلاگ زیر را بخوانید:\n https://parsiya.net/blog/2020-05-01-towards-a-quieter-burp-history  ترافیک برنامه‌ها را توسط user-Agent شان تشخیص دادم. هر دو برنامه کلمه gkApollo را در user-agent داشتند. پس بقیه ترافیک به درد من نمیخورد. برای تشخیص ترافیک این دو برنامه از هم به کلمات دیگر در user-agent دقت کردم:\n ترافیک برنامه QAS که بر پایه Qt است این کلمه را دارد QtWebEngine/5.5.1. ترافیک برنامه AGL که بر پایه الکترون است این دو را دارد Electron/1.4.16 و playstation-now/0.0.0.  توسط یک افزونه به نام Request Highlighter در Burp ترافیک این دو برنامه را زرد و آبی کردم که تشخیص آنها از هم راحت‌تر باشد.\nپروتکل پیام های websocket پس از پراکسی کردن در Burp ترافیک سرور websocket را می‌بینیم. پیام‌های پروتکل این سرور بسیار ساده بودند و به نظر می‌رسید توسط JSON.stringify ‌جاوااسکریپت ایجاد شده‌اند. .پیام ها به این شکل بودند:\n{ \u0026#34;command\u0026#34;: \u0026#34;isMicConnected\u0026#34;, \u0026#34;params\u0026#34;: {}, \u0026#34;source\u0026#34;: \u0026#34;AGL\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;QAS\u0026#34; }  فرمان یا command که مشخص می‌کند این دستور باید چه کاری انجام دهد. پارامترهای دستور. بخشهای سوم و چهارم مبدا و مقصد پیام هستند. در واقع مبدا پیام مهم نیست و فقط مقصد مهم است.  برای دیدن اینکه چه دستورهایی در برنامه وجود دارند دو کار کردم:\n برنامه را اجرا کردم و چند کار داخل برنامه انجام دادم سپس ترافیک داخل Burp را دیدم. کد برنامه الکترون را باز کردم و اسم چند دستور که در Burp دیده بودم را سرچ کردم تا به بخش commandHandler رسیدم. در این بخش همه دستورات سرور وجود داشتند.  دو دستور مهم هستند: setUrl و setUrlDefaultBrowser.\nsetUrl به برنامه می‌گوید که کدام وب سایت را باز کند. پیام این دستور به این شکل است:\n{ \u0026#34;command\u0026#34;: \u0026#34;setUrl\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://psnow.playstation.com/app/1.10.43/105/00d3603f8/\u0026#34; }, \u0026#34;source\u0026#34;: \u0026#34;AGL\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;QAS\u0026#34; } setUrlDefaultBrowser یک فایل را به کمک سیستم عامل باز می‌کند. مثلاَ اگر ورودی آن یک آدرس وب سایت باشد، آن را در مرورگر باز می‌کند و یک فایل ورد در برنامه آفیس (اگر نصب شده باشد) باز می‌شود. چند روز بعد از گزارش باگ به من به یاد یکی از باگ های Tavis Ormandy افتادم که با استفاده از این دستور به RCE دست یافته بود.\n https://bugs.chromium.org/p/project-zero/issues/detail?id=693  اگر یک فایل اجرایی را با این دستور باز کنیم، ویندوز خود آن فایل را اجرا می‌کند. پس دستور زیر ماشین حساب ویندوز را اجرا می‌کند.\n{ \u0026#34;command\u0026#34;: \u0026#34;setUrl\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;file:///c:/windows/system32/calc.exe\u0026#34; }, \u0026#34;source\u0026#34;: \u0026#34;AGL\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;QAS\u0026#34; } با استفاده از این دستور دیگر نیاز به nodeIntegration هم نداریم. اما این دستور یک محدودیت بزرگ دارد. فقط می‌توانیم فایل اجرا کنیم و نمی‌توانیم به فایل اجرایی پارامتر و یا سوییچ بفرستیم.\nمشکل سوم: اجرای کد روی ماشین توسط دستورات websocket در Burp دیدم که برنامه AGL (الکترون) به QAS می‌گوید که یک وب سایت را باز کند. در ابتدا من به مبدا و مقصد دقت نکردم و بی‌خیال باگ شدم چون بازکردن سایت در QAS فایده‌ای برای من نداشت. اما چند ساعت بعد وقتی کار دیگری انجام می‌دادم یادم آمد که چرا مقصد را AGL (برنامه الکترون) نگذارم؟ با فرستادن پیام پایین وب سایتی که در بخش اول ساخته بودم (ماشین حساب ویندوز را اجرا می‌کرد) در برنامه الکترون باز کردم و ماشین حساب ویندوز اجرا شد.\n{ \u0026#34;command\u0026#34;: \u0026#34;setUrl\u0026#34;, \u0026#34;params\u0026#34;: { \u0026#34;url\u0026#34;: \u0026#34;https://example.net\u0026#34; }, \u0026#34;source\u0026#34;: \u0026#34;AGL\u0026#34;, \u0026#34;target\u0026#34;: \u0026#34;QAS\u0026#34; } بعد از این کد یک برنامه چت بر پایه websocket را دستکاری کردم و در سطل (؟) s3 دیگری قرار دادم. بعد از باز کردن این وب سایت در مرورگر روی کامپیوتری که برنامه psnow در حال اجرا بود می‌توانستم با سرور websocket صحبت کنم و به آن دستور بفرستم.\nامنیت websocket اولین مرحله در ایجاد ارتباط با یک سرور websocket، فرستادن یک ریکوئست HTTP با تعدادی هِدِر (header) خاص است. در حالت عادی Same-Origin Policy یا SOP مرورگر به اسکریپت‌های یک اریجین اجازه نمی‌دهد تا با اریجین دیگر ارتباط برقرار کنند (بحث SOP مفصلتر از این است که اینجا مطرح کنم ولی حتماً در مورد آن بخوانید چون یکی از مهمترین بخشهای امنیت مرورگر و وب است). websocket ها شامل SOP نمیشوند. یعنی هر وب سایت میتواند با هر سرور websocket ارتباط برقرار کند.\nحل این مشکلات تا اینجا سه باگ را بررسی کردیم و فهمیدیم که اگر برنامه PlayStation Now را اجرا کنیم. وب سایتی که در مرورگر کامپیوتر ما باز شده است می‌تواند روی ماشین ما کد اجرا کند. این اصلاً خوب نیست.\nیکی از مهمترین وظایف من به عنوان یک مهندس امنیت نرم افزار، حل مشکلات امنیتی است. راحت‌ترین روش حل این مشکل چک کردن هدر origin در اولین قدم ایجاد ارتباط websocket است. این هدر فقط توسط مرورگر می‌تواند اضافه شود1. اولین ریکوئست ایجاد یک websocket شکلی مشابه این دارد:\nGET /chat HTTP/1.1 Host: example.com:8000 Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== - مقدار این هدر معمولاً مهم نیست Sec-WebSocket-Version: 13 Origin: whatever.com چون نمی‌توان به مکانیزم SOP برای فیلتر کردن درخواست های websocket اتکا کرد باید به صورت دستی هدر origin را بررسی کنیم و مواردی که نمی‌خواهیم (مثلاً هر چه که از playstation.com.* نیست) را رد کنیم.\nدومین مشکل این است که سرور روی همه IP های دستگاه در حال شنیدن است. به عبارت دیگر روی 0.0.0.0 بایند شده. این یعنی هر کسی که بتواند به پورت 1235 دستگاه از خارج دسترسی داشته باشد می‌تواند به آن وصل شود. در دنیای واقعی این مشکل آنقدر ترسناک نیست زیرا اکثر مودم و روترها تنها اجازه دسترسی مستقیم به پورت را در شبکه داخلی می‌دهند. برای حل این مشکل باید سرور روی localhost بایند شود.\nچی یاد گرفتیم؟ متاسفانه در این باگ مرزهای علم را جابجا نکردم و دانش جدیدی تولید نشد. خودم هم چیز جدیدی یاد نگرفتم. اما امیدوارم خواننده چند نکته یادگرفته باشد. اگر بازخورد یا پیشنهادی دارید، پیدا کردن من در اینترنت بسیار راحت است.\n  به این هدرها forbidden header می‌گویند. \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://parsiya.github.io/parsiya.fa/post/psnow/","summary":"این اولین بانتیِ PlayStation من و اولین متن فارسیِ من درباره امنیت است.","title":"آسیب پذیری Remote Code Execution در PlayStation Now"}]